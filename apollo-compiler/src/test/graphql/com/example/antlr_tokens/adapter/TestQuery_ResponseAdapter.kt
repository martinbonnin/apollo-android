// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.antlr_tokens.adapter

import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.api.internal.ResponseAdapter
import com.apollographql.apollo.api.internal.ResponseReader
import com.apollographql.apollo.api.internal.ResponseWriter
import com.example.antlr_tokens.TestQuery
import kotlin.Array
import kotlin.String
import kotlin.Suppress

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
object TestQuery_ResponseAdapter : ResponseAdapter<TestQuery.Data> {
  val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
    ResponseField(
      type = ResponseField.Type.Named.Object("TypeWithGraphQLKeywords"),
      responseName = "typeWithGraphQLKeywords",
      fieldName = "typeWithGraphQLKeywords",
      arguments = emptyMap(),
      conditions = emptyList(),
      possibleFieldSets = mapOf(
        "" to TypeWithGraphQLKeywords.RESPONSE_FIELDS
      ),
    )
  )

  override fun fromResponse(reader: ResponseReader, __typename: String?): TestQuery.Data {
    return reader.run {
      var typeWithGraphQLKeywords: TestQuery.Data.TypeWithGraphQLKeywords? = null
      while(true) {
        when (selectField(RESPONSE_FIELDS)) {
          0 -> typeWithGraphQLKeywords = readObject<TestQuery.Data.TypeWithGraphQLKeywords>(RESPONSE_FIELDS[0]) { reader ->
            TypeWithGraphQLKeywords.fromResponse(reader)
          }
          else -> break
        }
      }
      TestQuery.Data(
        typeWithGraphQLKeywords = typeWithGraphQLKeywords
      )
    }
  }

  override fun toResponse(writer: ResponseWriter, value: TestQuery.Data) {
    if(value.typeWithGraphQLKeywords == null) {
      writer.writeObject(RESPONSE_FIELDS[0], null)
    } else {
      writer.writeObject(RESPONSE_FIELDS[0]) { writer ->
        TypeWithGraphQLKeywords.toResponse(writer, value.typeWithGraphQLKeywords)
      }
    }
  }

  object TypeWithGraphQLKeywords : ResponseAdapter<TestQuery.Data.TypeWithGraphQLKeywords> {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField(
        type = ResponseField.Type.Named.Other("String"),
        responseName = "on",
        fieldName = "on",
        arguments = emptyMap(),
        conditions = emptyList(),
        possibleFieldSets = emptyMap(),
      ),
      ResponseField(
        type = ResponseField.Type.Named.Other("String"),
        responseName = "null",
        fieldName = "null",
        arguments = mapOf<String, Any?>(
          "fragment" to mapOf<String, Any?>(
            "kind" to "Variable",
            "variableName" to "operation")),
        conditions = emptyList(),
        possibleFieldSets = emptyMap(),
      ),
      ResponseField(
        type = ResponseField.Type.Named.Other("String"),
        responseName = "alias",
        fieldName = "null",
        arguments = mapOf<String, Any?>(
          "fragment" to """
          |A string
          |with a new line
          """.trimMargin()),
        conditions = emptyList(),
        possibleFieldSets = emptyMap(),
      )
    )

    override fun fromResponse(reader: ResponseReader, __typename: String?):
        TestQuery.Data.TypeWithGraphQLKeywords {
      return reader.run {
        var on: String? = null
        var null_: String? = null
        var alias: String? = null
        while(true) {
          when (selectField(RESPONSE_FIELDS)) {
            0 -> on = readString(RESPONSE_FIELDS[0])
            1 -> null_ = readString(RESPONSE_FIELDS[1])
            2 -> alias = readString(RESPONSE_FIELDS[2])
            else -> break
          }
        }
        TestQuery.Data.TypeWithGraphQLKeywords(
          on = on,
          null_ = null_,
          alias = alias
        )
      }
    }

    override fun toResponse(writer: ResponseWriter, value: TestQuery.Data.TypeWithGraphQLKeywords) {
      writer.writeString(RESPONSE_FIELDS[0], value.on)
      writer.writeString(RESPONSE_FIELDS[1], value.null_)
      writer.writeString(RESPONSE_FIELDS[2], value.alias)
    }
  }
}
