// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.antlr_tokens.adapter

import com.apollographql.apollo3.api.NullableStringResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.Variable
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.antlr_tokens.TestQuery
import kotlin.Array
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
object TestQuery_ResponseAdapter : ResponseAdapter<TestQuery.Data> {
  val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
    ResponseField(
      type = ResponseField.Type.Named.Object("TypeWithGraphQLKeywords"),
      fieldName = "typeWithGraphQLKeywords",
      fieldSets = listOf(
        ResponseField.FieldSet(null, TypeWithGraphQLKeywords.RESPONSE_FIELDS)
      ),
    )
  )

  val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

  override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
      TestQuery.Data {
    var typeWithGraphQLKeywords: TestQuery.Data.TypeWithGraphQLKeywords? = null
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> typeWithGraphQLKeywords = TypeWithGraphQLKeywords.obj().nullable().fromResponse(reader,
            responseAdapterCache)
        else -> break
      }
    }
    return TestQuery.Data(
      typeWithGraphQLKeywords = typeWithGraphQLKeywords
    )
  }

  override fun toResponse(
    writer: JsonWriter,
    responseAdapterCache: ResponseAdapterCache,
    value: TestQuery.Data
  ) {
    writer.name("typeWithGraphQLKeywords")
    TypeWithGraphQLKeywords.obj().nullable().toResponse(writer, responseAdapterCache,
        value.typeWithGraphQLKeywords)
  }

  object TypeWithGraphQLKeywords : ResponseAdapter<TestQuery.Data.TypeWithGraphQLKeywords> {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField(
        type = ResponseField.Type.Named.Other("String"),
        fieldName = "on",
      ),
      ResponseField(
        type = ResponseField.Type.Named.Other("String"),
        fieldName = "null",
        arguments = mapOf<String, Any?>(
          "fragment" to Variable("operation")),
      ),
      ResponseField(
        type = ResponseField.Type.Named.Other("String"),
        fieldName = "null",
        responseName = "alias",
        arguments = mapOf<String, Any?>(
          "fragment" to """
          |A string
          |with a new line
          """.trimMargin()),
      )
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        TestQuery.Data.TypeWithGraphQLKeywords {
      var on: String? = null
      var null_: String? = null
      var alias: String? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> on = NullableStringResponseAdapter.fromResponse(reader, responseAdapterCache)
          1 -> null_ = NullableStringResponseAdapter.fromResponse(reader, responseAdapterCache)
          2 -> alias = NullableStringResponseAdapter.fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      return TestQuery.Data.TypeWithGraphQLKeywords(
        on = on,
        null_ = null_,
        alias = alias
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: TestQuery.Data.TypeWithGraphQLKeywords
    ) {
      writer.name("on")
      NullableStringResponseAdapter.toResponse(writer, responseAdapterCache, value.on)
      writer.name("null")
      NullableStringResponseAdapter.toResponse(writer, responseAdapterCache, value.null_)
      writer.name("alias")
      NullableStringResponseAdapter.toResponse(writer, responseAdapterCache, value.alias)
    }
  }
}
