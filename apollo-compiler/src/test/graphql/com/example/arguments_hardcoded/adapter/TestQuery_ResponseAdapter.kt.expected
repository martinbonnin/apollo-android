// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.arguments_hardcoded.adapter

import com.apollographql.apollo3.api.IntResponseAdapter
import com.apollographql.apollo3.api.NullableStringResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.arguments_hardcoded.TestQuery
import kotlin.Array
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
object TestQuery_ResponseAdapter : ResponseAdapter<TestQuery.Data> {
  val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
    ResponseField(
      type = ResponseField.Type.List(ResponseField.Type.Named.Object("Review")),
      fieldName = "reviews",
      arguments = mapOf<String, Any?>(
        "episode" to "JEDI",
        "starsInt" to 10,
        "starsFloat" to 9.9),
      fieldSets = listOf(
        ResponseField.FieldSet(null, Reviews.RESPONSE_FIELDS)
      ),
    ),
    ResponseField(
      type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("Int")),
      fieldName = "testNullableArguments",
      arguments = mapOf<String, Any?>(
        "int" to null,
        "string" to null,
        "float" to null,
        "review" to null,
        "episode" to null,
        "boolean" to null,
        "list" to null),
    )
  )

  val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

  override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
      TestQuery.Data {
    var reviews: List<TestQuery.Data.Reviews?>? = null
    var testNullableArguments: Int? = null
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> reviews = Reviews.obj().nullable().list().nullable().fromResponse(reader,
            responseAdapterCache)
        1 -> testNullableArguments = IntResponseAdapter.fromResponse(reader, responseAdapterCache)
        else -> break
      }
    }
    return TestQuery.Data(
      reviews = reviews,
      testNullableArguments = testNullableArguments!!
    )
  }

  override fun toResponse(
    writer: JsonWriter,
    responseAdapterCache: ResponseAdapterCache,
    value: TestQuery.Data
  ) {
    writer.name("reviews")
    Reviews.obj().nullable().list().nullable().toResponse(writer, responseAdapterCache,
        value.reviews)
    writer.name("testNullableArguments")
    IntResponseAdapter.toResponse(writer, responseAdapterCache, value.testNullableArguments)
  }

  object Reviews : ResponseAdapter<TestQuery.Data.Reviews> {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("Int")),
        fieldName = "stars",
      ),
      ResponseField(
        type = ResponseField.Type.Named.Other("String"),
        fieldName = "commentary",
      )
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        TestQuery.Data.Reviews {
      var stars: Int? = null
      var commentary: String? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> stars = IntResponseAdapter.fromResponse(reader, responseAdapterCache)
          1 -> commentary = NullableStringResponseAdapter.fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      return TestQuery.Data.Reviews(
        stars = stars!!,
        commentary = commentary
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: TestQuery.Data.Reviews
    ) {
      writer.name("stars")
      IntResponseAdapter.toResponse(writer, responseAdapterCache, value.stars)
      writer.name("commentary")
      NullableStringResponseAdapter.toResponse(writer, responseAdapterCache, value.commentary)
    }
  }
}
