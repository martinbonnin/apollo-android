// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.arguments_simple.fragment.adapter

import com.apollographql.apollo3.api.NullableIntResponseAdapter
import com.apollographql.apollo3.api.NullableStringResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.Variable
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.arguments_simple.fragment.HeroDetails
import kotlin.Array
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
object HeroDetails_ResponseAdapter : ResponseAdapter<HeroDetails.Data> {
  val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
    ResponseField.Typename,
    ResponseField(
      type = ResponseField.Type.NotNull(ResponseField.Type.Named.Object("FriendsConnection")),
      fieldName = "friendsConnection",
      arguments = mapOf<String, Any?>(
        "first" to Variable("friendsCount")),
      fieldSets = listOf(
        ResponseField.FieldSet(null, FriendsConnection.RESPONSE_FIELDS)
      ),
    )
  )

  val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

  override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
      HeroDetails.Data {
    var __typename: String? = null
    var friendsConnection: HeroDetails.Data.FriendsConnection? = null
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
        1 -> friendsConnection = FriendsConnection.obj().fromResponse(reader, responseAdapterCache)
        else -> break
      }
    }
    return HeroDetails.Data(
      __typename = __typename!!,
      friendsConnection = friendsConnection!!
    )
  }

  override fun toResponse(
    writer: JsonWriter,
    responseAdapterCache: ResponseAdapterCache,
    value: HeroDetails.Data
  ) {
    writer.beginObject()
    writer.name("__typename")
    StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
    writer.name("friendsConnection")
    FriendsConnection.obj().toResponse(writer, responseAdapterCache, value.friendsConnection)
    writer.endObject()
  }

  object FriendsConnection : ResponseAdapter<HeroDetails.Data.FriendsConnection> {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField(
        type = ResponseField.Type.Named.Other("Int"),
        fieldName = "totalCount",
      ),
      ResponseField(
        type = ResponseField.Type.List(ResponseField.Type.Named.Object("FriendsEdge")),
        fieldName = "edges",
        fieldSets = listOf(
          ResponseField.FieldSet(null, Edges.RESPONSE_FIELDS)
        ),
      )
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        HeroDetails.Data.FriendsConnection {
      var totalCount: Int? = null
      var edges: List<HeroDetails.Data.FriendsConnection.Edges?>? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> totalCount = NullableIntResponseAdapter.fromResponse(reader, responseAdapterCache)
          1 -> edges = Edges.obj().nullable().list().nullable().fromResponse(reader,
              responseAdapterCache)
          else -> break
        }
      }
      return HeroDetails.Data.FriendsConnection(
        totalCount = totalCount,
        edges = edges
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: HeroDetails.Data.FriendsConnection
    ) {
      writer.beginObject()
      writer.name("totalCount")
      NullableIntResponseAdapter.toResponse(writer, responseAdapterCache, value.totalCount)
      writer.name("edges")
      Edges.obj().nullable().list().nullable().toResponse(writer, responseAdapterCache, value.edges)
      writer.endObject()
    }

    object Edges : ResponseAdapter<HeroDetails.Data.FriendsConnection.Edges> {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.Named.Object("Character"),
          fieldName = "node",
          fieldSets = listOf(
            ResponseField.FieldSet(null, Node.RESPONSE_FIELDS)
          ),
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          HeroDetails.Data.FriendsConnection.Edges {
        var node: HeroDetails.Data.FriendsConnection.Edges.Node? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> node = Node.obj().nullable().fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return HeroDetails.Data.FriendsConnection.Edges(
          node = node
        )
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: HeroDetails.Data.FriendsConnection.Edges
      ) {
        writer.beginObject()
        writer.name("node")
        Node.obj().nullable().toResponse(writer, responseAdapterCache, value.node)
        writer.endObject()
      }

      object Node : ResponseAdapter<HeroDetails.Data.FriendsConnection.Edges.Node> {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField(
            type = ResponseField.Type.Named.Other("String"),
            fieldName = "name",
            conditions = listOf(
              ResponseField.Condition.booleanCondition("IncludeName", false)
            ),
          )
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            HeroDetails.Data.FriendsConnection.Edges.Node {
          var name: String? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> name = NullableStringResponseAdapter.fromResponse(reader, responseAdapterCache)
              else -> break
            }
          }
          return HeroDetails.Data.FriendsConnection.Edges.Node(
            name = name
          )
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: HeroDetails.Data.FriendsConnection.Edges.Node
        ) {
          writer.beginObject()
          writer.name("name")
          NullableStringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
          writer.endObject()
        }
      }
    }
  }
}
