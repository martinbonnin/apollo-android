// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.directive_with_inline_fragment

import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.QueryDocumentMinifier
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.example.directive_with_inline_fragment.adapter.TestQuery_ResponseAdapter
import com.example.directive_with_inline_fragment.adapter.TestQuery_VariablesAdapter
import kotlin.Boolean
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
data class TestQuery(
  val withDetails: Boolean,
  val skipHumanDetails: Boolean
) : Query<TestQuery.Data> {
  override fun operationId(): String = OPERATION_ID

  override fun queryDocument(): String = QUERY_DOCUMENT

  override fun serializeVariables(writer: JsonWriter, responseAdapterCache: ResponseAdapterCache) {
    TestQuery_VariablesAdapter.obj().toResponse(writer, responseAdapterCache, this)
  }

  override fun name(): String = OPERATION_NAME

  override fun adapter(): ResponseAdapter<Data> {
    return TestQuery_ResponseAdapter.obj()
  }

  override fun responseFields(): List<ResponseField.FieldSet> = listOf(
    ResponseField.FieldSet(null, TestQuery_ResponseAdapter.RESPONSE_FIELDS)
  )
  /**
   * The query type, represents all of the entry points into our object graph
   */
  data class Data(
    val hero: Hero?
  ) : Query.Data {
    /**
     * A character from the Star Wars universe
     */
    interface Hero {
      val __typename: String

      /**
       * The ID of the character
       */
      val id: String

      interface Human : Hero {
        /**
         * What this human calls themselves
         */
        val name: String

        /**
         * The home planet of the human, or null if unknown
         */
        val homePlanet: String?
      }

      interface Droid : Hero {
        /**
         * What others call this droid
         */
        val name: String

        /**
         * This droid's primary function
         */
        val primaryFunction: String?
      }

      interface Character : Hero {
        /**
         * The name of the character
         */
        val name: String
      }

      data class HumanCharacterHero(
        override val __typename: String,
        /**
         * The ID of the character
         */
        override val id: String,
        /**
         * What this human calls themselves
         */
        override val name: String,
        /**
         * The home planet of the human, or null if unknown
         */
        override val homePlanet: String?
      ) : Hero, Human, Character

      data class DroidCharacterHero(
        override val __typename: String,
        /**
         * The ID of the character
         */
        override val id: String,
        /**
         * What others call this droid
         */
        override val name: String,
        /**
         * This droid's primary function
         */
        override val primaryFunction: String?
      ) : Hero, Droid, Character

      data class OtherHero(
        override val __typename: String,
        /**
         * The ID of the character
         */
        override val id: String
      ) : Hero
    }
  }

  companion object {
    const val OPERATION_ID: String =
        "1fc50a1808d1ff72f74d821b563ee69df2fc04dd650e41d27d75d90d0413bd65"

    val QUERY_DOCUMENT: String = QueryDocumentMinifier.minify(
          """
          |query TestQuery(${'$'}withDetails: Boolean!, ${'$'}skipHumanDetails: Boolean!) {
          |  hero {
          |    __typename
          |    id
          |    ... on Human @include(if: ${'$'}withDetails) @skip(if: ${'$'}skipHumanDetails) {
          |      name
          |      homePlanet
          |    }
          |    ... on Droid @include(if: ${'$'}withDetails) {
          |      name
          |      primaryFunction
          |    }
          |    ... on Character @include(if: ${'$'}withDetails) {
          |      name
          |    }
          |  }
          |}
          """.trimMargin()
        )

    val OPERATION_NAME: String = "TestQuery"
  }
}
