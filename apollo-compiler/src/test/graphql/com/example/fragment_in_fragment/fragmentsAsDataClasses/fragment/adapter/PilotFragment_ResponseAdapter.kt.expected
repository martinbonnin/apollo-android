// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.fragment_in_fragment.fragment.adapter

import com.apollographql.apollo3.api.NullableStringResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.internal.json.MapJsonReader
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.fragment_in_fragment.fragment.PilotFragment
import com.example.fragment_in_fragment.fragment.PlanetFragment
import kotlin.Array
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
object PilotFragment_ResponseAdapter : ResponseAdapter<PilotFragment.Data> {
  val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
    ResponseField.Typename,
    ResponseField(
      type = ResponseField.Type.Named.Other("String"),
      fieldName = "name",
    ),
    ResponseField(
      type = ResponseField.Type.Named.Object("Planet"),
      fieldName = "homeworld",
      fieldSets = listOf(
        ResponseField.FieldSet("Planet", PlanetFragment_ResponseAdapter.RESPONSE_FIELDS),
      ),
    )
  )

  val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

  override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
      PilotFragment.Data {
    var __typename: String? = null
    var name: String? = null
    var homeworld: PilotFragment.Data.Homeworld? = null
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
        1 -> name = NullableStringResponseAdapter.fromResponse(reader, responseAdapterCache)
        2 -> homeworld = Homeworld.obj(true).nullable().fromResponse(reader, responseAdapterCache)
        else -> break
      }
    }
    return PilotFragment.Data(
      __typename = __typename!!,
      name = name,
      homeworld = homeworld
    )
  }

  override fun toResponse(
    writer: JsonWriter,
    responseAdapterCache: ResponseAdapterCache,
    value: PilotFragment.Data
  ) {
    writer.name("__typename")
    StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
    writer.name("name")
    NullableStringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
    writer.name("homeworld")
    Homeworld.obj(true).nullable().toResponse(writer, responseAdapterCache, value.homeworld)
  }

  object Homeworld : ResponseAdapter<PilotFragment.Data.Homeworld> {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.Typename
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        PilotFragment.Data.Homeworld {
      var __typename: String? = null

      var planetFragment: PlanetFragment.Data? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      if (__typename in arrayOf("Planet")) {
        (reader as MapJsonReader).rewind()
        planetFragment = PlanetFragment_ResponseAdapter.fromResponse(reader, responseAdapterCache)
      }

      return PilotFragment.Data.Homeworld(
        __typename = __typename!!,
        planetFragment = planetFragment
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: PilotFragment.Data.Homeworld
    ) {
      writer.name("__typename")
      StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
      if (value.planetFragment != null)
          PlanetFragment_ResponseAdapter.toResponse(writer, responseAdapterCache, value.planetFragment)
    }
  }
}
