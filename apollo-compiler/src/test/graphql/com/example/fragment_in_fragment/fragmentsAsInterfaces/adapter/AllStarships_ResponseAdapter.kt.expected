// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.fragment_in_fragment.adapter

import com.apollographql.apollo3.api.NullableStringResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.fragment_in_fragment.AllStarships
import kotlin.Array
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
object AllStarships_ResponseAdapter : ResponseAdapter<AllStarships.Data> {
  val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
    ResponseField(
      type = ResponseField.Type.Named.Object("StarshipsConnection"),
      fieldName = "allStarships",
      arguments = mapOf<String, Any?>(
        "first" to 7),
      fieldSets = listOf(
        ResponseField.FieldSet(null, AllStarships.RESPONSE_FIELDS)
      ),
    )
  )

  val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

  override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
      com.example.fragment_in_fragment.AllStarships.Data {
    var allStarships: com.example.fragment_in_fragment.AllStarships.Data.AllStarships? = null
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> allStarships = AllStarships.obj().nullable().fromResponse(reader, responseAdapterCache)
        else -> break
      }
    }
    return com.example.fragment_in_fragment.AllStarships.Data(
      allStarships = allStarships
    )
  }

  override fun toResponse(
    writer: JsonWriter,
    responseAdapterCache: ResponseAdapterCache,
    value: com.example.fragment_in_fragment.AllStarships.Data
  ) {
    writer.name("allStarships")
    AllStarships.obj().nullable().toResponse(writer, responseAdapterCache, value.allStarships)
  }

  object AllStarships :
      ResponseAdapter<com.example.fragment_in_fragment.AllStarships.Data.AllStarships> {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField(
        type = ResponseField.Type.List(ResponseField.Type.Named.Object("StarshipsEdge")),
        fieldName = "edges",
        fieldSets = listOf(
          ResponseField.FieldSet(null, Edges.RESPONSE_FIELDS)
        ),
      )
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        com.example.fragment_in_fragment.AllStarships.Data.AllStarships {
      var edges: List<com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges?>? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> edges = Edges.obj().nullable().list().nullable().fromResponse(reader,
              responseAdapterCache)
          else -> break
        }
      }
      return com.example.fragment_in_fragment.AllStarships.Data.AllStarships(
        edges = edges
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: com.example.fragment_in_fragment.AllStarships.Data.AllStarships
    ) {
      writer.name("edges")
      Edges.obj().nullable().list().nullable().toResponse(writer, responseAdapterCache, value.edges)
    }

    object Edges :
        ResponseAdapter<com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges> {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.Named.Object("Starship"),
          fieldName = "node",
          fieldSets = listOf(
            ResponseField.FieldSet("Starship", Node.StarshipNode.RESPONSE_FIELDS),
            ResponseField.FieldSet(null, Node.OtherNode.RESPONSE_FIELDS),
          ),
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges {
        var node: com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> node = Node.obj().nullable().fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges(
          node = node
        )
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges
      ) {
        writer.name("node")
        Node.obj().nullable().toResponse(writer, responseAdapterCache, value.node)
      }

      object Node :
          ResponseAdapter<com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node>
          {
        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node {
          check(reader.nextName() == "__typename")
          val typename = reader.nextString()!!
          return when(typename) {
            "Starship" -> StarshipNode.fromResponse(reader, responseAdapterCache, typename)
            else -> OtherNode.fromResponse(reader, responseAdapterCache, typename)
          }
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node
        ) {
          when(value) {
            is com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode -> StarshipNode.toResponse(writer, responseAdapterCache, value)
            is com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.OtherNode -> OtherNode.toResponse(writer, responseAdapterCache, value)
          }
        }

        object StarshipNode {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField.Typename,
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              fieldName = "id",
            ),
            ResponseField(
              type = ResponseField.Type.Named.Other("String"),
              fieldName = "name",
            ),
            ResponseField(
              type = ResponseField.Type.Named.Object("StarshipPilotsConnection"),
              fieldName = "pilotConnection",
              fieldSets = listOf(
                ResponseField.FieldSet(null, PilotConnection.RESPONSE_FIELDS)
              ),
            )
          )

          val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

          fun fromResponse(
            reader: JsonReader,
            responseAdapterCache: ResponseAdapterCache,
            __typename: String?
          ):
              com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode {
            var __typename: String? = __typename
            var id: String? = null
            var name: String? = null
            var pilotConnection: com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                1 -> id = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                2 -> name = NullableStringResponseAdapter.fromResponse(reader, responseAdapterCache)
                3 -> pilotConnection = PilotConnection.obj().nullable().fromResponse(reader,
                    responseAdapterCache)
                else -> break
              }
            }
            return com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode(
              __typename = __typename!!,
              id = id!!,
              name = name,
              pilotConnection = pilotConnection
            )
          }

          fun toResponse(
            writer: JsonWriter,
            responseAdapterCache: ResponseAdapterCache,
            value: com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode
          ) {
            writer.name("__typename")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
            writer.name("id")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.id)
            writer.name("name")
            NullableStringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
            writer.name("pilotConnection")
            PilotConnection.obj().nullable().toResponse(writer, responseAdapterCache,
                value.pilotConnection)
          }

          object PilotConnection :
              ResponseAdapter<com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection>
              {
            val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
              ResponseField(
                type =
                    ResponseField.Type.List(ResponseField.Type.Named.Object("StarshipPilotsEdge")),
                fieldName = "edges",
                fieldSets = listOf(
                  ResponseField.FieldSet(null, Edges.RESPONSE_FIELDS)
                ),
              )
            )

            val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

            override fun fromResponse(reader: JsonReader,
                responseAdapterCache: ResponseAdapterCache):
                com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection {
              var edges: List<com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges?>? = null
              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> edges = Edges.obj().nullable().list().nullable().fromResponse(reader,
                      responseAdapterCache)
                  else -> break
                }
              }
              return com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection(
                edges = edges
              )
            }

            override fun toResponse(
              writer: JsonWriter,
              responseAdapterCache: ResponseAdapterCache,
              value: com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection
            ) {
              writer.name("edges")
              Edges.obj().nullable().list().nullable().toResponse(writer, responseAdapterCache,
                  value.edges)
            }

            object Edges :
                ResponseAdapter<com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges>
                {
              val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
                ResponseField(
                  type = ResponseField.Type.Named.Object("Person"),
                  fieldName = "node",
                  fieldSets = listOf(
                    ResponseField.FieldSet("Person", Node.PersonNode.RESPONSE_FIELDS),
                    ResponseField.FieldSet(null, Node.OtherNode.RESPONSE_FIELDS),
                  ),
                )
              )

              val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

              override fun fromResponse(reader: JsonReader,
                  responseAdapterCache: ResponseAdapterCache):
                  com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges {
                var node: com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node? = null
                while(true) {
                  when (reader.selectName(RESPONSE_NAMES)) {
                    0 -> node = Node.obj().nullable().fromResponse(reader, responseAdapterCache)
                    else -> break
                  }
                }
                return com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges(
                  node = node
                )
              }

              override fun toResponse(
                writer: JsonWriter,
                responseAdapterCache: ResponseAdapterCache,
                value: com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges
              ) {
                writer.name("node")
                Node.obj().nullable().toResponse(writer, responseAdapterCache, value.node)
              }

              object Node :
                  ResponseAdapter<com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node>
                  {
                override fun fromResponse(reader: JsonReader,
                    responseAdapterCache: ResponseAdapterCache):
                    com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node {
                  check(reader.nextName() == "__typename")
                  val typename = reader.nextString()!!
                  return when(typename) {
                    "Person" -> PersonNode.fromResponse(reader, responseAdapterCache, typename)
                    else -> OtherNode.fromResponse(reader, responseAdapterCache, typename)
                  }
                }

                override fun toResponse(
                  writer: JsonWriter,
                  responseAdapterCache: ResponseAdapterCache,
                  value: com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node
                ) {
                  when(value) {
                    is com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.PersonNode -> PersonNode.toResponse(writer, responseAdapterCache, value)
                    is com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.OtherNode -> OtherNode.toResponse(writer, responseAdapterCache, value)
                  }
                }

                object PersonNode {
                  val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
                    ResponseField.Typename,
                    ResponseField(
                      type = ResponseField.Type.Named.Other("String"),
                      fieldName = "name",
                    ),
                    ResponseField(
                      type = ResponseField.Type.Named.Object("Planet"),
                      fieldName = "homeworld",
                      fieldSets = listOf(
                        ResponseField.FieldSet("Planet", Homeworld.PlanetHomeworld.RESPONSE_FIELDS),
                        ResponseField.FieldSet(null, Homeworld.OtherHomeworld.RESPONSE_FIELDS),
                      ),
                    )
                  )

                  val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

                  fun fromResponse(
                    reader: JsonReader,
                    responseAdapterCache: ResponseAdapterCache,
                    __typename: String?
                  ):
                      com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.PersonNode {
                    var __typename: String? = __typename
                    var name: String? = null
                    var homeworld: com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.PersonNode.Homeworld? = null
                    while(true) {
                      when (reader.selectName(RESPONSE_NAMES)) {
                        0 -> __typename = StringResponseAdapter.fromResponse(reader,
                            responseAdapterCache)
                        1 -> name = NullableStringResponseAdapter.fromResponse(reader,
                            responseAdapterCache)
                        2 -> homeworld = Homeworld.obj().nullable().fromResponse(reader,
                            responseAdapterCache)
                        else -> break
                      }
                    }
                    return com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.PersonNode(
                      __typename = __typename!!,
                      name = name,
                      homeworld = homeworld
                    )
                  }

                  fun toResponse(
                    writer: JsonWriter,
                    responseAdapterCache: ResponseAdapterCache,
                    value: com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.PersonNode
                  ) {
                    writer.name("__typename")
                    StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
                    writer.name("name")
                    NullableStringResponseAdapter.toResponse(writer, responseAdapterCache,
                        value.name)
                    writer.name("homeworld")
                    Homeworld.obj().nullable().toResponse(writer, responseAdapterCache,
                        value.homeworld)
                  }

                  object Homeworld :
                      ResponseAdapter<com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.PersonNode.Homeworld>
                      {
                    override fun fromResponse(reader: JsonReader,
                        responseAdapterCache: ResponseAdapterCache):
                        com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.PersonNode.Homeworld {
                      check(reader.nextName() == "__typename")
                      val typename = reader.nextString()!!
                      return when(typename) {
                        "Planet" -> PlanetHomeworld.fromResponse(reader, responseAdapterCache, typename)
                        else -> OtherHomeworld.fromResponse(reader, responseAdapterCache, typename)
                      }
                    }

                    override fun toResponse(
                      writer: JsonWriter,
                      responseAdapterCache: ResponseAdapterCache,
                      value: com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.PersonNode.Homeworld
                    ) {
                      when(value) {
                        is com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.PersonNode.Homeworld.PlanetHomeworld -> PlanetHomeworld.toResponse(writer, responseAdapterCache, value)
                        is com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.PersonNode.Homeworld.OtherHomeworld -> OtherHomeworld.toResponse(writer, responseAdapterCache, value)
                      }
                    }

                    object PlanetHomeworld {
                      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
                        ResponseField.Typename,
                        ResponseField(
                          type = ResponseField.Type.Named.Other("String"),
                          fieldName = "name",
                        )
                      )

                      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

                      fun fromResponse(
                        reader: JsonReader,
                        responseAdapterCache: ResponseAdapterCache,
                        __typename: String?
                      ):
                          com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.PersonNode.Homeworld.PlanetHomeworld {
                        var __typename: String? = __typename
                        var name: String? = null
                        while(true) {
                          when (reader.selectName(RESPONSE_NAMES)) {
                            0 -> __typename = StringResponseAdapter.fromResponse(reader,
                                responseAdapterCache)
                            1 -> name = NullableStringResponseAdapter.fromResponse(reader,
                                responseAdapterCache)
                            else -> break
                          }
                        }
                        return com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.PersonNode.Homeworld.PlanetHomeworld(
                          __typename = __typename!!,
                          name = name
                        )
                      }

                      fun toResponse(
                        writer: JsonWriter,
                        responseAdapterCache: ResponseAdapterCache,
                        value: com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.PersonNode.Homeworld.PlanetHomeworld
                      ) {
                        writer.name("__typename")
                        StringResponseAdapter.toResponse(writer, responseAdapterCache,
                            value.__typename)
                        writer.name("name")
                        NullableStringResponseAdapter.toResponse(writer, responseAdapterCache,
                            value.name)
                      }
                    }

                    object OtherHomeworld {
                      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
                        ResponseField.Typename
                      )

                      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

                      fun fromResponse(
                        reader: JsonReader,
                        responseAdapterCache: ResponseAdapterCache,
                        __typename: String?
                      ):
                          com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.PersonNode.Homeworld.OtherHomeworld {
                        var __typename: String? = __typename
                        while(true) {
                          when (reader.selectName(RESPONSE_NAMES)) {
                            0 -> __typename = StringResponseAdapter.fromResponse(reader,
                                responseAdapterCache)
                            else -> break
                          }
                        }
                        return com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.PersonNode.Homeworld.OtherHomeworld(
                          __typename = __typename!!
                        )
                      }

                      fun toResponse(
                        writer: JsonWriter,
                        responseAdapterCache: ResponseAdapterCache,
                        value: com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.PersonNode.Homeworld.OtherHomeworld
                      ) {
                        writer.name("__typename")
                        StringResponseAdapter.toResponse(writer, responseAdapterCache,
                            value.__typename)
                      }
                    }
                  }
                }

                object OtherNode {
                  val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
                    ResponseField.Typename
                  )

                  val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

                  fun fromResponse(
                    reader: JsonReader,
                    responseAdapterCache: ResponseAdapterCache,
                    __typename: String?
                  ):
                      com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.OtherNode {
                    var __typename: String? = __typename
                    while(true) {
                      when (reader.selectName(RESPONSE_NAMES)) {
                        0 -> __typename = StringResponseAdapter.fromResponse(reader,
                            responseAdapterCache)
                        else -> break
                      }
                    }
                    return com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.OtherNode(
                      __typename = __typename!!
                    )
                  }

                  fun toResponse(
                    writer: JsonWriter,
                    responseAdapterCache: ResponseAdapterCache,
                    value: com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.StarshipNode.PilotConnection.Edges.Node.OtherNode
                  ) {
                    writer.name("__typename")
                    StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
                  }
                }
              }
            }
          }
        }

        object OtherNode {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField.Typename
          )

          val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

          fun fromResponse(
            reader: JsonReader,
            responseAdapterCache: ResponseAdapterCache,
            __typename: String?
          ): com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.OtherNode {
            var __typename: String? = __typename
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                else -> break
              }
            }
            return com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.OtherNode(
              __typename = __typename!!
            )
          }

          fun toResponse(
            writer: JsonWriter,
            responseAdapterCache: ResponseAdapterCache,
            value: com.example.fragment_in_fragment.AllStarships.Data.AllStarships.Edges.Node.OtherNode
          ) {
            writer.name("__typename")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
          }
        }
      }
    }
  }
}
