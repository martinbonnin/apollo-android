// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.fragment_in_fragment.fragment.adapter

import com.apollographql.apollo3.api.NullableStringResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.fragment_in_fragment.fragment.PilotFragmentImpl
import kotlin.Array
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
object PilotFragmentImpl_ResponseAdapter : ResponseAdapter<PilotFragmentImpl.Data> {
  val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
    ResponseField.Typename,
    ResponseField(
      type = ResponseField.Type.Named.Other("String"),
      fieldName = "name",
    ),
    ResponseField(
      type = ResponseField.Type.Named.Object("Planet"),
      fieldName = "homeworld",
      fieldSets = listOf(
        ResponseField.FieldSet("Planet", Homeworld.PlanetHomeworld.RESPONSE_FIELDS),
        ResponseField.FieldSet(null, Homeworld.OtherHomeworld.RESPONSE_FIELDS),
      ),
    )
  )

  val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

  override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
      PilotFragmentImpl.Data {
    var __typename: String? = null
    var name: String? = null
    var homeworld: PilotFragmentImpl.Data.Homeworld? = null
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
        1 -> name = NullableStringResponseAdapter.fromResponse(reader, responseAdapterCache)
        2 -> homeworld = Homeworld.obj().nullable().fromResponse(reader, responseAdapterCache)
        else -> break
      }
    }
    return PilotFragmentImpl.Data(
      __typename = __typename!!,
      name = name,
      homeworld = homeworld
    )
  }

  override fun toResponse(
    writer: JsonWriter,
    responseAdapterCache: ResponseAdapterCache,
    value: PilotFragmentImpl.Data
  ) {
    writer.beginObject()
    writer.name("__typename")
    StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
    writer.name("name")
    NullableStringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
    writer.name("homeworld")
    Homeworld.obj().nullable().toResponse(writer, responseAdapterCache, value.homeworld)
    writer.endObject()
  }

  object Homeworld : ResponseAdapter<PilotFragmentImpl.Data.Homeworld> {
    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        PilotFragmentImpl.Data.Homeworld {
      check(reader.nextName() == "__typename")
      val typename = reader.nextString()!!
      return when(typename) {
        "Planet" -> PlanetHomeworld.fromResponse(reader, responseAdapterCache, typename)
        else -> OtherHomeworld.fromResponse(reader, responseAdapterCache, typename)
      }
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: PilotFragmentImpl.Data.Homeworld
    ) {
      when(value) {
        is PilotFragmentImpl.Data.Homeworld.PlanetHomeworld -> PlanetHomeworld.toResponse(writer, responseAdapterCache, value)
        is PilotFragmentImpl.Data.Homeworld.OtherHomeworld -> OtherHomeworld.toResponse(writer, responseAdapterCache, value)
      }
    }

    object PlanetHomeworld {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename,
        ResponseField(
          type = ResponseField.Type.Named.Other("String"),
          fieldName = "name",
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String?
      ): PilotFragmentImpl.Data.Homeworld.PlanetHomeworld {
        var __typename: String? = __typename
        var name: String? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> name = NullableStringResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return PilotFragmentImpl.Data.Homeworld.PlanetHomeworld(
          __typename = __typename!!,
          name = name
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: PilotFragmentImpl.Data.Homeworld.PlanetHomeworld
      ) {
        writer.beginObject()
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("name")
        NullableStringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        writer.endObject()
      }
    }

    object OtherHomeworld {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String?
      ): PilotFragmentImpl.Data.Homeworld.OtherHomeworld {
        var __typename: String? = __typename
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return PilotFragmentImpl.Data.Homeworld.OtherHomeworld(
          __typename = __typename!!
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: PilotFragmentImpl.Data.Homeworld.OtherHomeworld
      ) {
        writer.beginObject()
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.endObject()
      }
    }
  }
}
