// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.fragment_used_twice.fragment.adapter

import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.example.fragment_used_twice.fragment.HeroDetailsImpl
import com.example.fragment_used_twice.type.CustomScalars
import kotlin.Any
import kotlin.Array
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
object HeroDetailsImpl_ResponseAdapter : ResponseAdapter<HeroDetailsImpl.Data> {
  override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
      HeroDetailsImpl.Data {
    check(reader.nextName() == "__typename")
    val typename = reader.nextString()!!
    return when(typename) {
      "Droid" -> CharacterData.fromResponse(reader, responseAdapterCache, typename)
      "Human" -> CharacterData.fromResponse(reader, responseAdapterCache, typename)
      else -> OtherData.fromResponse(reader, responseAdapterCache, typename)
    }
  }

  override fun toResponse(
    writer: JsonWriter,
    responseAdapterCache: ResponseAdapterCache,
    value: HeroDetailsImpl.Data
  ) {
    when(value) {
      is HeroDetailsImpl.Data.CharacterData -> CharacterData.toResponse(writer, responseAdapterCache, value)
      is HeroDetailsImpl.Data.OtherData -> OtherData.toResponse(writer, responseAdapterCache, value)
    }
  }

  object CharacterData {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.Typename,
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
        fieldName = "name",
      ),
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("Date")),
        fieldName = "birthDate",
      )
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

    fun fromResponse(
      reader: JsonReader,
      responseAdapterCache: ResponseAdapterCache,
      __typename: String?
    ): HeroDetailsImpl.Data.CharacterData {
      var __typename: String? = __typename
      var name: String? = null
      var birthDate: Any? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
          1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
          2 -> birthDate = responseAdapterCache.responseAdapterFor<Any>(CustomScalars.Date).fromResponse(reader,
              responseAdapterCache)
          else -> break
        }
      }
      return HeroDetailsImpl.Data.CharacterData(
        __typename = __typename!!,
        name = name!!,
        birthDate = birthDate!!
      )
    }

    fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: HeroDetailsImpl.Data.CharacterData
    ) {
      writer.beginObject()
      writer.name("__typename")
      StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
      writer.name("name")
      StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
      writer.name("birthDate")
      responseAdapterCache.responseAdapterFor<Any>(CustomScalars.Date).toResponse(writer,
          responseAdapterCache, value.birthDate)
      writer.endObject()
    }
  }

  object OtherData {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.Typename,
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
        fieldName = "name",
      )
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

    fun fromResponse(
      reader: JsonReader,
      responseAdapterCache: ResponseAdapterCache,
      __typename: String?
    ): HeroDetailsImpl.Data.OtherData {
      var __typename: String? = __typename
      var name: String? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
          1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      return HeroDetailsImpl.Data.OtherData(
        __typename = __typename!!,
        name = name!!
      )
    }

    fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: HeroDetailsImpl.Data.OtherData
    ) {
      writer.beginObject()
      writer.name("__typename")
      StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
      writer.name("name")
      StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
      writer.endObject()
    }
  }
}
