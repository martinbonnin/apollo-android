// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.fragment_with_inline_fragment.fragment.adapter

import com.apollographql.apollo3.api.NullableIntResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.internal.json.MapJsonReader
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.fragment_with_inline_fragment.fragment.HeroDetails
import com.example.fragment_with_inline_fragment.fragment.HumanDetails
import kotlin.Array
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
object HeroDetails_ResponseAdapter : ResponseAdapter<HeroDetails.Data> {
  val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
    ResponseField.Typename,
    ResponseField(
      type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
      fieldName = "name",
    ),
    ResponseField(
      type = ResponseField.Type.NotNull(ResponseField.Type.Named.Object("FriendsConnection")),
      fieldName = "friendsConnection",
      fieldSets = listOf(
        ResponseField.FieldSet(null, FriendsConnection.RESPONSE_FIELDS)
      ),
    )
  )

  val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

  override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
      HeroDetails.Data {
    var __typename: String? = null
    var name: String? = null
    var friendsConnection: HeroDetails.Data.FriendsConnection? = null

    var asAsDroid: HeroDetails.Data.AsDroid? = null
    var humanDetails: HumanDetails.Data? = null
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
        1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
        2 -> friendsConnection = FriendsConnection.obj().fromResponse(reader, responseAdapterCache)
        else -> break
      }
    }
    if (__typename in arrayOf("Droid")) {
      (reader as MapJsonReader).rewind()
      asAsDroid = AsDroid.fromResponse(reader, responseAdapterCache)
    }
    if (__typename in arrayOf("Human")) {
      (reader as MapJsonReader).rewind()
      humanDetails = HumanDetails_ResponseAdapter.fromResponse(reader, responseAdapterCache)
    }

    return HeroDetails.Data(
      __typename = __typename!!,
      name = name!!,
      friendsConnection = friendsConnection!!,
      asAsDroid = asAsDroid,
      humanDetails = humanDetails
    )
  }

  override fun toResponse(
    writer: JsonWriter,
    responseAdapterCache: ResponseAdapterCache,
    value: HeroDetails.Data
  ) {
    writer.name("__typename")
    StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)

    writer.name("name")
    StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)

    writer.name("friendsConnection")
    FriendsConnection.obj().toResponse(writer, responseAdapterCache, value.friendsConnection)
    if (value.asAsDroid != null) AsDroid.toResponse(writer, responseAdapterCache, value.asAsDroid)
    if (value.humanDetails != null)
        HumanDetails_ResponseAdapter.toResponse(writer, responseAdapterCache, value.humanDetails)
  }

  object FriendsConnection : ResponseAdapter<HeroDetails.Data.FriendsConnection> {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField(
        type = ResponseField.Type.Named.Other("Int"),
        fieldName = "totalCount",
      ),
      ResponseField(
        type = ResponseField.Type.List(ResponseField.Type.Named.Object("FriendsEdge")),
        fieldName = "edges",
        fieldSets = listOf(
          ResponseField.FieldSet(null, Edges.RESPONSE_FIELDS)
        ),
      )
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        HeroDetails.Data.FriendsConnection {
      var totalCount: Int? = null
      var edges: List<HeroDetails.Data.FriendsConnection.Edges?>? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> totalCount = NullableIntResponseAdapter.fromResponse(reader, responseAdapterCache)
          1 -> edges = Edges.obj().nullable().list().nullable().fromResponse(reader,
              responseAdapterCache)
          else -> break
        }
      }
      return HeroDetails.Data.FriendsConnection(
        totalCount = totalCount,
        edges = edges
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: HeroDetails.Data.FriendsConnection
    ) {
      writer.name("totalCount")
      NullableIntResponseAdapter.toResponse(writer, responseAdapterCache, value.totalCount)
      writer.name("edges")
      Edges.obj().nullable().list().nullable().toResponse(writer, responseAdapterCache, value.edges)
    }

    object Edges : ResponseAdapter<HeroDetails.Data.FriendsConnection.Edges> {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.Named.Object("Character"),
          fieldName = "node",
          fieldSets = listOf(
            ResponseField.FieldSet(null, Node.RESPONSE_FIELDS)
          ),
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          HeroDetails.Data.FriendsConnection.Edges {
        var node: HeroDetails.Data.FriendsConnection.Edges.Node? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> node = Node.obj().nullable().fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return HeroDetails.Data.FriendsConnection.Edges(
          node = node
        )
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: HeroDetails.Data.FriendsConnection.Edges
      ) {
        writer.name("node")
        Node.obj().nullable().toResponse(writer, responseAdapterCache, value.node)
      }

      object Node : ResponseAdapter<HeroDetails.Data.FriendsConnection.Edges.Node> {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
            fieldName = "name",
          )
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            HeroDetails.Data.FriendsConnection.Edges.Node {
          var name: String? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              else -> break
            }
          }
          return HeroDetails.Data.FriendsConnection.Edges.Node(
            name = name!!
          )
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: HeroDetails.Data.FriendsConnection.Edges.Node
        ) {
          writer.name("name")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        }
      }
    }
  }

  object AsDroid : ResponseAdapter<HeroDetails.Data.AsDroid> {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.Typename,
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
        fieldName = "name",
      ),
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Object("FriendsConnection")),
        fieldName = "friendsConnection",
        fieldSets = listOf(
          ResponseField.FieldSet(null, FriendsConnection.RESPONSE_FIELDS)
        ),
      )
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        HeroDetails.Data.AsDroid {
      var __typename: String? = null
      var name: String? = null
      var friendsConnection: HeroDetails.Data.AsDroid.FriendsConnection? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
          1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
          2 -> friendsConnection = FriendsConnection.obj().fromResponse(reader,
              responseAdapterCache)
          else -> break
        }
      }
      return HeroDetails.Data.AsDroid(
        __typename = __typename!!,
        name = name!!,
        friendsConnection = friendsConnection!!
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: HeroDetails.Data.AsDroid
    ) {
      writer.name("__typename")
      StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
      writer.name("name")
      StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
      writer.name("friendsConnection")
      FriendsConnection.obj().toResponse(writer, responseAdapterCache, value.friendsConnection)
    }

    object FriendsConnection : ResponseAdapter<HeroDetails.Data.AsDroid.FriendsConnection> {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.Named.Other("Int"),
          fieldName = "totalCount",
        ),
        ResponseField(
          type = ResponseField.Type.List(ResponseField.Type.Named.Object("FriendsEdge")),
          fieldName = "edges",
          fieldSets = listOf(
            ResponseField.FieldSet(null, Edges.RESPONSE_FIELDS)
          ),
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          HeroDetails.Data.AsDroid.FriendsConnection {
        var totalCount: Int? = null
        var edges: List<HeroDetails.Data.AsDroid.FriendsConnection.Edges?>? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> totalCount = NullableIntResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> edges = Edges.obj().nullable().list().nullable().fromResponse(reader,
                responseAdapterCache)
            else -> break
          }
        }
        return HeroDetails.Data.AsDroid.FriendsConnection(
          totalCount = totalCount,
          edges = edges
        )
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: HeroDetails.Data.AsDroid.FriendsConnection
      ) {
        writer.name("totalCount")
        NullableIntResponseAdapter.toResponse(writer, responseAdapterCache, value.totalCount)
        writer.name("edges")
        Edges.obj().nullable().list().nullable().toResponse(writer, responseAdapterCache,
            value.edges)
      }

      object Edges : ResponseAdapter<HeroDetails.Data.AsDroid.FriendsConnection.Edges> {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField(
            type = ResponseField.Type.Named.Object("Character"),
            fieldName = "node",
            fieldSets = listOf(
              ResponseField.FieldSet(null, Node.RESPONSE_FIELDS)
            ),
          )
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            HeroDetails.Data.AsDroid.FriendsConnection.Edges {
          var node: HeroDetails.Data.AsDroid.FriendsConnection.Edges.Node? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> node = Node.obj().nullable().fromResponse(reader, responseAdapterCache)
              else -> break
            }
          }
          return HeroDetails.Data.AsDroid.FriendsConnection.Edges(
            node = node
          )
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: HeroDetails.Data.AsDroid.FriendsConnection.Edges
        ) {
          writer.name("node")
          Node.obj().nullable().toResponse(writer, responseAdapterCache, value.node)
        }

        object Node : ResponseAdapter<HeroDetails.Data.AsDroid.FriendsConnection.Edges.Node> {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              fieldName = "name",
            )
          )

          val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

          override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
              HeroDetails.Data.AsDroid.FriendsConnection.Edges.Node {
            var name: String? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                else -> break
              }
            }
            return HeroDetails.Data.AsDroid.FriendsConnection.Edges.Node(
              name = name!!
            )
          }

          override fun toResponse(
            writer: JsonWriter,
            responseAdapterCache: ResponseAdapterCache,
            value: HeroDetails.Data.AsDroid.FriendsConnection.Edges.Node
          ) {
            writer.name("name")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
          }
        }
      }
    }
  }
}
