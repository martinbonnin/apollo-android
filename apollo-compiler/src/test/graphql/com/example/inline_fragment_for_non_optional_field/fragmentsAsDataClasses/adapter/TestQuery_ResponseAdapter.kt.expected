// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.inline_fragment_for_non_optional_field.adapter

import com.apollographql.apollo3.api.NullableDoubleResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.internal.json.MapJsonReader
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.example.inline_fragment_for_non_optional_field.TestQuery
import kotlin.Array
import kotlin.Double
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
object TestQuery_ResponseAdapter : ResponseAdapter<TestQuery.Data> {
  val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
    ResponseField(
      type = ResponseField.Type.NotNull(ResponseField.Type.Named.Object("Character")),
      fieldName = "nonOptionalHero",
      arguments = mapOf<String, Any?>(
        "episode" to "EMPIRE"),
      fieldSets = listOf(
        ResponseField.FieldSet("Human", NonOptionalHero.AsHuman.RESPONSE_FIELDS),
      ),
    )
  )

  val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

  override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
      TestQuery.Data {
    var nonOptionalHero: TestQuery.Data.NonOptionalHero? = null
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> nonOptionalHero = NonOptionalHero.obj(true).fromResponse(reader, responseAdapterCache)
        else -> break
      }
    }
    return TestQuery.Data(
      nonOptionalHero = nonOptionalHero!!
    )
  }

  override fun toResponse(
    writer: JsonWriter,
    responseAdapterCache: ResponseAdapterCache,
    value: TestQuery.Data
  ) {
    writer.name("nonOptionalHero")
    NonOptionalHero.obj(true).toResponse(writer, responseAdapterCache, value.nonOptionalHero)
  }

  object NonOptionalHero : ResponseAdapter<TestQuery.Data.NonOptionalHero> {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.Typename,
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
        fieldName = "name",
      )
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        TestQuery.Data.NonOptionalHero {
      var __typename: String? = null
      var name: String? = null

      var asAsHuman: TestQuery.Data.NonOptionalHero.AsHuman? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
          1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      if (__typename in arrayOf("Human")) {
        (reader as MapJsonReader).rewind()
        asAsHuman = AsHuman.fromResponse(reader, responseAdapterCache)
      }

      return TestQuery.Data.NonOptionalHero(
        __typename = __typename!!,
        name = name!!,
        asAsHuman = asAsHuman
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: TestQuery.Data.NonOptionalHero
    ) {
      writer.name("__typename")
      StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)

      writer.name("name")
      StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
      if (value.asAsHuman != null) AsHuman.toResponse(writer, responseAdapterCache, value.asAsHuman)
    }

    object AsHuman : ResponseAdapter<TestQuery.Data.NonOptionalHero.AsHuman> {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename,
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          fieldName = "name",
        ),
        ResponseField(
          type = ResponseField.Type.Named.Other("Float"),
          fieldName = "height",
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestQuery.Data.NonOptionalHero.AsHuman {
        var __typename: String? = null
        var name: String? = null
        var height: Double? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            2 -> height = NullableDoubleResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.NonOptionalHero.AsHuman(
          __typename = __typename!!,
          name = name!!,
          height = height
        )
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.NonOptionalHero.AsHuman
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("name")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        writer.name("height")
        NullableDoubleResponseAdapter.toResponse(writer, responseAdapterCache, value.height)
      }
    }
  }
}
