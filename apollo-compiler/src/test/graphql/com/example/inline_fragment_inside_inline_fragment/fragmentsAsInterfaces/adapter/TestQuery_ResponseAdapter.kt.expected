// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.inline_fragment_inside_inline_fragment.adapter

import com.apollographql.apollo3.api.NullableStringResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.inline_fragment_inside_inline_fragment.TestQuery
import kotlin.Array
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
object TestQuery_ResponseAdapter : ResponseAdapter<TestQuery.Data> {
  val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
    ResponseField(
      type = ResponseField.Type.List(ResponseField.Type.Named.Object("SearchResult")),
      fieldName = "search",
      arguments = mapOf<String, Any?>(
        "text" to "bla-bla"),
      fieldSets = listOf(
        ResponseField.FieldSet("Droid", Search.CharacterDroidSearch.RESPONSE_FIELDS),
        ResponseField.FieldSet("Human", Search.CharacterHumanSearch.RESPONSE_FIELDS),
        ResponseField.FieldSet(null, Search.OtherSearch.RESPONSE_FIELDS),
      ),
    )
  )

  val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

  override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
      TestQuery.Data {
    var search: List<TestQuery.Data.Search?>? = null
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> search = Search.obj().nullable().list().nullable().fromResponse(reader,
            responseAdapterCache)
        else -> break
      }
    }
    return TestQuery.Data(
      search = search
    )
  }

  override fun toResponse(
    writer: JsonWriter,
    responseAdapterCache: ResponseAdapterCache,
    value: TestQuery.Data
  ) {
    writer.beginObject()
    writer.name("search")
    Search.obj().nullable().list().nullable().toResponse(writer, responseAdapterCache, value.search)
    writer.endObject()
  }

  object Search : ResponseAdapter<TestQuery.Data.Search> {
    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        TestQuery.Data.Search {
      check(reader.nextName() == "__typename")
      val typename = reader.nextString()!!
      return when(typename) {
        "Droid" -> CharacterDroidSearch.fromResponse(reader, responseAdapterCache, typename)
        "Human" -> CharacterHumanSearch.fromResponse(reader, responseAdapterCache, typename)
        else -> OtherSearch.fromResponse(reader, responseAdapterCache, typename)
      }
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: TestQuery.Data.Search
    ) {
      when(value) {
        is TestQuery.Data.Search.CharacterDroidSearch -> CharacterDroidSearch.toResponse(writer, responseAdapterCache, value)
        is TestQuery.Data.Search.CharacterHumanSearch -> CharacterHumanSearch.toResponse(writer, responseAdapterCache, value)
        is TestQuery.Data.Search.OtherSearch -> OtherSearch.toResponse(writer, responseAdapterCache, value)
      }
    }

    object CharacterDroidSearch {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename,
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          fieldName = "name",
        ),
        ResponseField(
          type = ResponseField.Type.Named.Other("String"),
          fieldName = "primaryFunction",
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String?
      ): TestQuery.Data.Search.CharacterDroidSearch {
        var __typename: String? = __typename
        var name: String? = null
        var primaryFunction: String? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            2 -> primaryFunction = NullableStringResponseAdapter.fromResponse(reader,
                responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.Search.CharacterDroidSearch(
          __typename = __typename!!,
          name = name!!,
          primaryFunction = primaryFunction
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.Search.CharacterDroidSearch
      ) {
        writer.beginObject()
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("name")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        writer.name("primaryFunction")
        NullableStringResponseAdapter.toResponse(writer, responseAdapterCache,
            value.primaryFunction)
        writer.endObject()
      }
    }

    object CharacterHumanSearch {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename,
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          fieldName = "name",
        ),
        ResponseField(
          type = ResponseField.Type.Named.Other("String"),
          fieldName = "homePlanet",
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String?
      ): TestQuery.Data.Search.CharacterHumanSearch {
        var __typename: String? = __typename
        var name: String? = null
        var homePlanet: String? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            2 -> homePlanet = NullableStringResponseAdapter.fromResponse(reader,
                responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.Search.CharacterHumanSearch(
          __typename = __typename!!,
          name = name!!,
          homePlanet = homePlanet
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.Search.CharacterHumanSearch
      ) {
        writer.beginObject()
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("name")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        writer.name("homePlanet")
        NullableStringResponseAdapter.toResponse(writer, responseAdapterCache, value.homePlanet)
        writer.endObject()
      }
    }

    object OtherSearch {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String?
      ): TestQuery.Data.Search.OtherSearch {
        var __typename: String? = __typename
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.Search.OtherSearch(
          __typename = __typename!!
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.Search.OtherSearch
      ) {
        writer.beginObject()
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.endObject()
      }
    }
  }
}
