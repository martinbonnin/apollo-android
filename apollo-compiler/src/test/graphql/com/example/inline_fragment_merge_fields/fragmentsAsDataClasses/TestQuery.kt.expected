// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.inline_fragment_merge_fields

import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.QueryDocumentMinifier
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.example.inline_fragment_merge_fields.adapter.TestQuery_ResponseAdapter
import com.example.inline_fragment_merge_fields.adapter.TestQuery_VariablesAdapter
import kotlin.Any
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
class TestQuery : Query<TestQuery.Data> {
  override fun operationId(): String = OPERATION_ID

  override fun queryDocument(): String = QUERY_DOCUMENT

  override fun serializeVariables(writer: JsonWriter, responseAdapterCache: ResponseAdapterCache) {
    TestQuery_VariablesAdapter.obj().toResponse(writer, responseAdapterCache, this)
  }

  override fun name(): String = OPERATION_NAME

  override fun adapter(): ResponseAdapter<Data> {
    return TestQuery_ResponseAdapter.obj()
  }

  override fun responseFields(): List<ResponseField.FieldSet> = listOf(
    ResponseField.FieldSet(null, TestQuery_ResponseAdapter.RESPONSE_FIELDS)
  )
  /**
   * The query type, represents all of the entry points into our object graph
   */
  data class Data(
    val hero: Hero?
  ) : Query.Data {
    /**
     * A character from the Star Wars universe
     */
    data class Hero(
      val __typename: String = "Character",
      /**
       * The name of the character
       */
      val name: String,
      /**
       * The friends of the character exposed as a connection with edges
       */
      val friendsConnection: FriendsConnection,
      val asAsCharacter: AsCharacter?
    ) {
      /**
       * A connection object for a character's friends
       */
      data class FriendsConnection(
        /**
         * The edges for each of the character's friends.
         */
        val edges: List<Edges?>?
      ) {
        fun edgesFilterNotNull(): List<Edges>? = edges?.filterNotNull()

        /**
         * An edge object for a character's friends
         */
        data class Edges(
          /**
           * The character represented by this friendship edge
           */
          val node: Node?
        ) {
          /**
           * A character from the Star Wars universe
           */
          data class Node(
            /**
             * The name of the character
             */
            val name: String
          )
        }
      }

      data class AsCharacter(
        val __typename: String,
        /**
         * The name of the character
         */
        val name: String,
        /**
         * The friends of the character exposed as a connection with edges
         */
        val friendsConnection: FriendsConnection,
        /**
         * Profile link
         */
        val profileLink: Any
      ) {
        /**
         * A connection object for a character's friends
         */
        data class FriendsConnection(
          /**
           * The edges for each of the character's friends.
           */
          val edges: List<Edges?>?
        ) {
          fun edgesFilterNotNull(): List<Edges>? = edges?.filterNotNull()

          /**
           * An edge object for a character's friends
           */
          data class Edges(
            /**
             * The character represented by this friendship edge
             */
            val node: Node?
          ) {
            /**
             * A character from the Star Wars universe
             */
            data class Node(
              /**
               * The name of the character
               */
              val name: String
            )
          }
        }
      }
    }
  }

  companion object {
    const val OPERATION_ID: String =
        "516a2d4b3fe97536486d2d559538aab9949d7c7e0de7081caec02439a0cb3969"

    val QUERY_DOCUMENT: String = QueryDocumentMinifier.minify(
          """
          |query TestQuery {
          |  hero {
          |    __typename
          |    name
          |    friendsConnection {
          |      edges {
          |        node {
          |          name
          |        }
          |      }
          |    }
          |    ... on Character {
          |      name
          |      profileLink
          |      friendsConnection {
          |        edges {
          |          node {
          |            name
          |          }
          |        }
          |      }
          |    }
          |  }
          |}
          """.trimMargin()
        )

    val OPERATION_NAME: String = "TestQuery"
  }
}
