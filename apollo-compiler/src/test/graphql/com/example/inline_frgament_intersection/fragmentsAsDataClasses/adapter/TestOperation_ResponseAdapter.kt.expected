// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.inline_frgament_intersection.adapter

import com.apollographql.apollo3.api.NullableDoubleResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.internal.json.MapJsonReader
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.obj
import com.example.inline_frgament_intersection.TestOperation
import com.example.inline_frgament_intersection.type.Race
import com.example.inline_frgament_intersection.type.Race_ResponseAdapter
import kotlin.Array
import kotlin.Double
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
object TestOperation_ResponseAdapter : ResponseAdapter<TestOperation.Data> {
  val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
    ResponseField(
      type = ResponseField.Type.NotNull(ResponseField.Type.Named.Object("Anything")),
      fieldName = "random",
      fieldSets = listOf(
        ResponseField.FieldSet("Human", Random.AsBeing.RESPONSE_FIELDS),
        ResponseField.FieldSet("Wookie", Random.AsBeing.RESPONSE_FIELDS),
        ResponseField.FieldSet("Wookie", Random.AsWookie.RESPONSE_FIELDS),
      ),
    )
  )

  val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

  override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
      TestOperation.Data {
    var random: TestOperation.Data.Random? = null
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> random = Random.obj(true).fromResponse(reader, responseAdapterCache)
        else -> break
      }
    }
    return TestOperation.Data(
      random = random!!
    )
  }

  override fun toResponse(
    writer: JsonWriter,
    responseAdapterCache: ResponseAdapterCache,
    value: TestOperation.Data
  ) {
    writer.beginObject()
    writer.name("random")
    Random.obj(true).toResponse(writer, responseAdapterCache, value.random)
    writer.endObject()
  }

  object Random : ResponseAdapter<TestOperation.Data.Random> {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.Typename
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        TestOperation.Data.Random {
      var __typename: String? = null

      var asAsBeing: TestOperation.Data.Random.AsBeing? = null
      var asAsWookie: TestOperation.Data.Random.AsWookie? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      if (__typename in arrayOf("Human", "Wookie")) {
        (reader as MapJsonReader).rewind()
        asAsBeing = AsBeing.fromResponse(reader, responseAdapterCache)
      }
      if (__typename in arrayOf("Wookie")) {
        (reader as MapJsonReader).rewind()
        asAsWookie = AsWookie.fromResponse(reader, responseAdapterCache)
      }

      return TestOperation.Data.Random(
        __typename = __typename!!,
        asAsBeing = asAsBeing,
        asAsWookie = asAsWookie
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: TestOperation.Data.Random
    ) {
      writer.beginObject()
      writer.name("__typename")
      StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
      if (value.asAsBeing != null) AsBeing.toResponse(writer, responseAdapterCache, value.asAsBeing)
      if (value.asAsWookie != null)
          AsWookie.toResponse(writer, responseAdapterCache, value.asAsWookie)
      writer.endObject()
    }

    object AsBeing : ResponseAdapter<TestOperation.Data.Random.AsBeing> {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename,
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          fieldName = "name",
        ),
        ResponseField(
          type =
              ResponseField.Type.NotNull(ResponseField.Type.List(ResponseField.Type.NotNull(ResponseField.Type.Named.Object("Being")))),
          fieldName = "friends",
          fieldSets = listOf(
            ResponseField.FieldSet("Wookie", Friends.AsWookie.RESPONSE_FIELDS),
          ),
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestOperation.Data.Random.AsBeing {
        var __typename: String? = null
        var name: String? = null
        var friends: List<TestOperation.Data.Random.AsBeing.Friends>? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            2 -> friends = Friends.obj(true).list().fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestOperation.Data.Random.AsBeing(
          __typename = __typename!!,
          name = name!!,
          friends = friends!!
        )
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestOperation.Data.Random.AsBeing
      ) {
        writer.beginObject()
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("name")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        writer.name("friends")
        Friends.obj(true).list().toResponse(writer, responseAdapterCache, value.friends)
        writer.endObject()
      }

      object Friends : ResponseAdapter<TestOperation.Data.Random.AsBeing.Friends> {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.Typename,
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
            fieldName = "name",
          )
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            TestOperation.Data.Random.AsBeing.Friends {
          var __typename: String? = null
          var name: String? = null

          var asAsWookie: TestOperation.Data.Random.AsBeing.Friends.AsWookie? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              else -> break
            }
          }
          if (__typename in arrayOf("Wookie")) {
            (reader as MapJsonReader).rewind()
            asAsWookie = AsWookie.fromResponse(reader, responseAdapterCache)
          }

          return TestOperation.Data.Random.AsBeing.Friends(
            __typename = __typename!!,
            name = name!!,
            asAsWookie = asAsWookie
          )
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestOperation.Data.Random.AsBeing.Friends
        ) {
          writer.beginObject()
          writer.name("__typename")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)

          writer.name("name")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
          if (value.asAsWookie != null)
              AsWookie.toResponse(writer, responseAdapterCache, value.asAsWookie)
          writer.endObject()
        }

        object AsWookie : ResponseAdapter<TestOperation.Data.Random.AsBeing.Friends.AsWookie> {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField.Typename,
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              fieldName = "name",
            ),
            ResponseField(
              type = ResponseField.Type.Named.Other("Float"),
              fieldName = "lifeExpectancy",
            )
          )

          val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

          override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
              TestOperation.Data.Random.AsBeing.Friends.AsWookie {
            var __typename: String? = null
            var name: String? = null
            var lifeExpectancy: Double? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                2 -> lifeExpectancy = NullableDoubleResponseAdapter.fromResponse(reader,
                    responseAdapterCache)
                else -> break
              }
            }
            return TestOperation.Data.Random.AsBeing.Friends.AsWookie(
              __typename = __typename!!,
              name = name!!,
              lifeExpectancy = lifeExpectancy
            )
          }

          override fun toResponse(
            writer: JsonWriter,
            responseAdapterCache: ResponseAdapterCache,
            value: TestOperation.Data.Random.AsBeing.Friends.AsWookie
          ) {
            writer.beginObject()
            writer.name("__typename")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
            writer.name("name")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
            writer.name("lifeExpectancy")
            NullableDoubleResponseAdapter.toResponse(writer, responseAdapterCache,
                value.lifeExpectancy)
            writer.endObject()
          }
        }
      }
    }

    object AsWookie : ResponseAdapter<TestOperation.Data.Random.AsWookie> {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename,
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("Race")),
          fieldName = "race",
        ),
        ResponseField(
          type =
              ResponseField.Type.NotNull(ResponseField.Type.List(ResponseField.Type.NotNull(ResponseField.Type.Named.Object("Being")))),
          fieldName = "friends",
          fieldSets = listOf(
            ResponseField.FieldSet(null, Friends.RESPONSE_FIELDS)
          ),
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestOperation.Data.Random.AsWookie {
        var __typename: String? = null
        var race: Race? = null
        var friends: List<TestOperation.Data.Random.AsWookie.Friends>? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> race = Race_ResponseAdapter.fromResponse(reader, responseAdapterCache)
            2 -> friends = Friends.obj().list().fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestOperation.Data.Random.AsWookie(
          __typename = __typename!!,
          race = race!!,
          friends = friends!!
        )
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestOperation.Data.Random.AsWookie
      ) {
        writer.beginObject()
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("race")
        Race_ResponseAdapter.toResponse(writer, responseAdapterCache, value.race)
        writer.name("friends")
        Friends.obj().list().toResponse(writer, responseAdapterCache, value.friends)
        writer.endObject()
      }

      object Friends : ResponseAdapter<TestOperation.Data.Random.AsWookie.Friends> {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField(
            type = ResponseField.Type.Named.Other("Float"),
            fieldName = "lifeExpectancy",
          )
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            TestOperation.Data.Random.AsWookie.Friends {
          var lifeExpectancy: Double? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> lifeExpectancy = NullableDoubleResponseAdapter.fromResponse(reader,
                  responseAdapterCache)
              else -> break
            }
          }
          return TestOperation.Data.Random.AsWookie.Friends(
            lifeExpectancy = lifeExpectancy
          )
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestOperation.Data.Random.AsWookie.Friends
        ) {
          writer.beginObject()
          writer.name("lifeExpectancy")
          NullableDoubleResponseAdapter.toResponse(writer, responseAdapterCache,
              value.lifeExpectancy)
          writer.endObject()
        }
      }
    }
  }
}
