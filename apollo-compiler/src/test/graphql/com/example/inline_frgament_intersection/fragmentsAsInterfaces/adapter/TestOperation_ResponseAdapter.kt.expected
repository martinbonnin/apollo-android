// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.inline_frgament_intersection.adapter

import com.apollographql.apollo3.api.NullableBooleanResponseAdapter
import com.apollographql.apollo3.api.NullableDoubleResponseAdapter
import com.apollographql.apollo3.api.NullableStringResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.obj
import com.example.inline_frgament_intersection.TestOperation
import com.example.inline_frgament_intersection.type.Race
import com.example.inline_frgament_intersection.type.Race_ResponseAdapter
import kotlin.Array
import kotlin.Boolean
import kotlin.Double
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
object TestOperation_ResponseAdapter : ResponseAdapter<TestOperation.Data> {
  val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
    ResponseField(
      type = ResponseField.Type.NotNull(ResponseField.Type.Named.Object("Anything")),
      fieldName = "random",
      fieldSets = listOf(
        ResponseField.FieldSet("Human", Random.BeingHumanRandom.RESPONSE_FIELDS),
        ResponseField.FieldSet("Wookie", Random.BeingWookieRandom.RESPONSE_FIELDS),
        ResponseField.FieldSet(null, Random.OtherRandom.RESPONSE_FIELDS),
      ),
    )
  )

  val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

  override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
      TestOperation.Data {
    var random: TestOperation.Data.Random? = null
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> random = Random.obj().fromResponse(reader, responseAdapterCache)
        else -> break
      }
    }
    return TestOperation.Data(
      random = random!!
    )
  }

  override fun toResponse(
    writer: JsonWriter,
    responseAdapterCache: ResponseAdapterCache,
    value: TestOperation.Data
  ) {
    writer.beginObject()
    writer.name("random")
    Random.obj().toResponse(writer, responseAdapterCache, value.random)
    writer.endObject()
  }

  object Random : ResponseAdapter<TestOperation.Data.Random> {
    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        TestOperation.Data.Random {
      check(reader.nextName() == "__typename")
      val typename = reader.nextString()!!
      return when(typename) {
        "Human" -> BeingHumanRandom.fromResponse(reader, responseAdapterCache, typename)
        "Wookie" -> BeingWookieRandom.fromResponse(reader, responseAdapterCache, typename)
        else -> OtherRandom.fromResponse(reader, responseAdapterCache, typename)
      }
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: TestOperation.Data.Random
    ) {
      when(value) {
        is TestOperation.Data.Random.BeingHumanRandom -> BeingHumanRandom.toResponse(writer, responseAdapterCache, value)
        is TestOperation.Data.Random.BeingWookieRandom -> BeingWookieRandom.toResponse(writer, responseAdapterCache, value)
        is TestOperation.Data.Random.OtherRandom -> OtherRandom.toResponse(writer, responseAdapterCache, value)
      }
    }

    object BeingHumanRandom {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename,
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          fieldName = "name",
        ),
        ResponseField(
          type =
              ResponseField.Type.NotNull(ResponseField.Type.List(ResponseField.Type.NotNull(ResponseField.Type.Named.Object("Being")))),
          fieldName = "friends",
          fieldSets = listOf(
            ResponseField.FieldSet("Wookie", Friends.WookieFriends.RESPONSE_FIELDS),
            ResponseField.FieldSet(null, Friends.OtherFriends.RESPONSE_FIELDS),
          ),
        ),
        ResponseField(
          type = ResponseField.Type.Named.Other("String"),
          fieldName = "profilePictureUrl",
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String?
      ): TestOperation.Data.Random.BeingHumanRandom {
        var __typename: String? = __typename
        var name: String? = null
        var friends: List<TestOperation.Data.Random.BeingHumanRandom.Friends>? = null
        var profilePictureUrl: String? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            2 -> friends = Friends.obj().list().fromResponse(reader, responseAdapterCache)
            3 -> profilePictureUrl = NullableStringResponseAdapter.fromResponse(reader,
                responseAdapterCache)
            else -> break
          }
        }
        return TestOperation.Data.Random.BeingHumanRandom(
          __typename = __typename!!,
          name = name!!,
          friends = friends!!,
          profilePictureUrl = profilePictureUrl
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestOperation.Data.Random.BeingHumanRandom
      ) {
        writer.beginObject()
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("name")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        writer.name("friends")
        Friends.obj().list().toResponse(writer, responseAdapterCache, value.friends)
        writer.name("profilePictureUrl")
        NullableStringResponseAdapter.toResponse(writer, responseAdapterCache,
            value.profilePictureUrl)
        writer.endObject()
      }

      object Friends : ResponseAdapter<TestOperation.Data.Random.BeingHumanRandom.Friends> {
        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            TestOperation.Data.Random.BeingHumanRandom.Friends {
          check(reader.nextName() == "__typename")
          val typename = reader.nextString()!!
          return when(typename) {
            "Wookie" -> WookieFriends.fromResponse(reader, responseAdapterCache, typename)
            else -> OtherFriends.fromResponse(reader, responseAdapterCache, typename)
          }
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestOperation.Data.Random.BeingHumanRandom.Friends
        ) {
          when(value) {
            is TestOperation.Data.Random.BeingHumanRandom.Friends.WookieFriends -> WookieFriends.toResponse(writer, responseAdapterCache, value)
            is TestOperation.Data.Random.BeingHumanRandom.Friends.OtherFriends -> OtherFriends.toResponse(writer, responseAdapterCache, value)
          }
        }

        object WookieFriends {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField.Typename,
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              fieldName = "name",
            ),
            ResponseField(
              type = ResponseField.Type.Named.Other("Boolean"),
              fieldName = "isFamous",
            ),
            ResponseField(
              type = ResponseField.Type.Named.Other("Float"),
              fieldName = "lifeExpectancy",
            ),
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("Race")),
              fieldName = "race",
            )
          )

          val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

          fun fromResponse(
            reader: JsonReader,
            responseAdapterCache: ResponseAdapterCache,
            __typename: String?
          ): TestOperation.Data.Random.BeingHumanRandom.Friends.WookieFriends {
            var __typename: String? = __typename
            var name: String? = null
            var isFamous: Boolean? = null
            var lifeExpectancy: Double? = null
            var race: Race? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                2 -> isFamous = NullableBooleanResponseAdapter.fromResponse(reader,
                    responseAdapterCache)
                3 -> lifeExpectancy = NullableDoubleResponseAdapter.fromResponse(reader,
                    responseAdapterCache)
                4 -> race = Race_ResponseAdapter.fromResponse(reader, responseAdapterCache)
                else -> break
              }
            }
            return TestOperation.Data.Random.BeingHumanRandom.Friends.WookieFriends(
              __typename = __typename!!,
              name = name!!,
              isFamous = isFamous,
              lifeExpectancy = lifeExpectancy,
              race = race!!
            )
          }

          fun toResponse(
            writer: JsonWriter,
            responseAdapterCache: ResponseAdapterCache,
            value: TestOperation.Data.Random.BeingHumanRandom.Friends.WookieFriends
          ) {
            writer.beginObject()
            writer.name("__typename")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
            writer.name("name")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
            writer.name("isFamous")
            NullableBooleanResponseAdapter.toResponse(writer, responseAdapterCache, value.isFamous)
            writer.name("lifeExpectancy")
            NullableDoubleResponseAdapter.toResponse(writer, responseAdapterCache,
                value.lifeExpectancy)
            writer.name("race")
            Race_ResponseAdapter.toResponse(writer, responseAdapterCache, value.race)
            writer.endObject()
          }
        }

        object OtherFriends {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField.Typename,
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              fieldName = "name",
            ),
            ResponseField(
              type = ResponseField.Type.Named.Other("Boolean"),
              fieldName = "isFamous",
            )
          )

          val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

          fun fromResponse(
            reader: JsonReader,
            responseAdapterCache: ResponseAdapterCache,
            __typename: String?
          ): TestOperation.Data.Random.BeingHumanRandom.Friends.OtherFriends {
            var __typename: String? = __typename
            var name: String? = null
            var isFamous: Boolean? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                2 -> isFamous = NullableBooleanResponseAdapter.fromResponse(reader,
                    responseAdapterCache)
                else -> break
              }
            }
            return TestOperation.Data.Random.BeingHumanRandom.Friends.OtherFriends(
              __typename = __typename!!,
              name = name!!,
              isFamous = isFamous
            )
          }

          fun toResponse(
            writer: JsonWriter,
            responseAdapterCache: ResponseAdapterCache,
            value: TestOperation.Data.Random.BeingHumanRandom.Friends.OtherFriends
          ) {
            writer.beginObject()
            writer.name("__typename")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
            writer.name("name")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
            writer.name("isFamous")
            NullableBooleanResponseAdapter.toResponse(writer, responseAdapterCache, value.isFamous)
            writer.endObject()
          }
        }
      }
    }

    object BeingWookieRandom {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename,
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          fieldName = "name",
        ),
        ResponseField(
          type =
              ResponseField.Type.NotNull(ResponseField.Type.List(ResponseField.Type.NotNull(ResponseField.Type.Named.Object("Being")))),
          fieldName = "friends",
          fieldSets = listOf(
            ResponseField.FieldSet("Wookie", Friends.WookieFriends.RESPONSE_FIELDS),
            ResponseField.FieldSet(null, Friends.OtherFriends.RESPONSE_FIELDS),
          ),
        ),
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("Race")),
          fieldName = "race",
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String?
      ): TestOperation.Data.Random.BeingWookieRandom {
        var __typename: String? = __typename
        var name: String? = null
        var friends: List<TestOperation.Data.Random.BeingWookieRandom.Friends>? = null
        var race: Race? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            2 -> friends = Friends.obj().list().fromResponse(reader, responseAdapterCache)
            3 -> race = Race_ResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestOperation.Data.Random.BeingWookieRandom(
          __typename = __typename!!,
          name = name!!,
          friends = friends!!,
          race = race!!
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestOperation.Data.Random.BeingWookieRandom
      ) {
        writer.beginObject()
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("name")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        writer.name("friends")
        Friends.obj().list().toResponse(writer, responseAdapterCache, value.friends)
        writer.name("race")
        Race_ResponseAdapter.toResponse(writer, responseAdapterCache, value.race)
        writer.endObject()
      }

      object Friends : ResponseAdapter<TestOperation.Data.Random.BeingWookieRandom.Friends> {
        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            TestOperation.Data.Random.BeingWookieRandom.Friends {
          check(reader.nextName() == "__typename")
          val typename = reader.nextString()!!
          return when(typename) {
            "Wookie" -> WookieFriends.fromResponse(reader, responseAdapterCache, typename)
            else -> OtherFriends.fromResponse(reader, responseAdapterCache, typename)
          }
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestOperation.Data.Random.BeingWookieRandom.Friends
        ) {
          when(value) {
            is TestOperation.Data.Random.BeingWookieRandom.Friends.WookieFriends -> WookieFriends.toResponse(writer, responseAdapterCache, value)
            is TestOperation.Data.Random.BeingWookieRandom.Friends.OtherFriends -> OtherFriends.toResponse(writer, responseAdapterCache, value)
          }
        }

        object WookieFriends {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField.Typename,
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              fieldName = "name",
            ),
            ResponseField(
              type = ResponseField.Type.Named.Other("Float"),
              fieldName = "lifeExpectancy",
            )
          )

          val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

          fun fromResponse(
            reader: JsonReader,
            responseAdapterCache: ResponseAdapterCache,
            __typename: String?
          ): TestOperation.Data.Random.BeingWookieRandom.Friends.WookieFriends {
            var __typename: String? = __typename
            var name: String? = null
            var lifeExpectancy: Double? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                2 -> lifeExpectancy = NullableDoubleResponseAdapter.fromResponse(reader,
                    responseAdapterCache)
                else -> break
              }
            }
            return TestOperation.Data.Random.BeingWookieRandom.Friends.WookieFriends(
              __typename = __typename!!,
              name = name!!,
              lifeExpectancy = lifeExpectancy
            )
          }

          fun toResponse(
            writer: JsonWriter,
            responseAdapterCache: ResponseAdapterCache,
            value: TestOperation.Data.Random.BeingWookieRandom.Friends.WookieFriends
          ) {
            writer.beginObject()
            writer.name("__typename")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
            writer.name("name")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
            writer.name("lifeExpectancy")
            NullableDoubleResponseAdapter.toResponse(writer, responseAdapterCache,
                value.lifeExpectancy)
            writer.endObject()
          }
        }

        object OtherFriends {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField.Typename,
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              fieldName = "name",
            ),
            ResponseField(
              type = ResponseField.Type.Named.Other("Float"),
              fieldName = "lifeExpectancy",
            )
          )

          val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

          fun fromResponse(
            reader: JsonReader,
            responseAdapterCache: ResponseAdapterCache,
            __typename: String?
          ): TestOperation.Data.Random.BeingWookieRandom.Friends.OtherFriends {
            var __typename: String? = __typename
            var name: String? = null
            var lifeExpectancy: Double? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                2 -> lifeExpectancy = NullableDoubleResponseAdapter.fromResponse(reader,
                    responseAdapterCache)
                else -> break
              }
            }
            return TestOperation.Data.Random.BeingWookieRandom.Friends.OtherFriends(
              __typename = __typename!!,
              name = name!!,
              lifeExpectancy = lifeExpectancy
            )
          }

          fun toResponse(
            writer: JsonWriter,
            responseAdapterCache: ResponseAdapterCache,
            value: TestOperation.Data.Random.BeingWookieRandom.Friends.OtherFriends
          ) {
            writer.beginObject()
            writer.name("__typename")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
            writer.name("name")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
            writer.name("lifeExpectancy")
            NullableDoubleResponseAdapter.toResponse(writer, responseAdapterCache,
                value.lifeExpectancy)
            writer.endObject()
          }
        }
      }
    }

    object OtherRandom {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String?
      ): TestOperation.Data.Random.OtherRandom {
        var __typename: String? = __typename
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestOperation.Data.Random.OtherRandom(
          __typename = __typename!!
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestOperation.Data.Random.OtherRandom
      ) {
        writer.beginObject()
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.endObject()
      }
    }
  }
}
