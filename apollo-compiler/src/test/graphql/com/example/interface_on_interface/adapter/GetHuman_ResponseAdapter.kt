// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.interface_on_interface.adapter

import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.api.internal.ResponseAdapter
import com.apollographql.apollo.api.internal.ResponseReader
import com.apollographql.apollo.api.internal.ResponseWriter
import com.example.interface_on_interface.GetHuman
import kotlin.Array
import kotlin.Double
import kotlin.String
import kotlin.Suppress

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
object GetHuman_ResponseAdapter : ResponseAdapter<GetHuman.Data> {
  val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
    ResponseField(
      type = ResponseField.Type.NotNull(ResponseField.Type.Named.Object("Human")),
      responseName = "human",
      fieldName = "human",
      arguments = emptyMap(),
      conditions = emptyList(),
      possibleFieldSets = mapOf(
        "" to Human.RESPONSE_FIELDS
      ),
    ),
    ResponseField(
      type = ResponseField.Type.NotNull(ResponseField.Type.Named.Object("Node")),
      responseName = "node",
      fieldName = "node",
      arguments = emptyMap(),
      conditions = emptyList(),
      possibleFieldSets = mapOf(
        "Human" to Node.HumanNode.RESPONSE_FIELDS,
        "" to Node.OtherNode.RESPONSE_FIELDS,
      ),
    )
  )

  override fun fromResponse(reader: ResponseReader, __typename: String?): GetHuman.Data {
    return reader.run {
      var human: GetHuman.Data.Human? = null
      var node: GetHuman.Data.Node? = null
      while(true) {
        when (selectField(RESPONSE_FIELDS)) {
          0 -> human = readObject<GetHuman.Data.Human>(RESPONSE_FIELDS[0]) { reader ->
            Human.fromResponse(reader)
          }
          1 -> node = readObject<GetHuman.Data.Node>(RESPONSE_FIELDS[1]) { reader ->
            Node.fromResponse(reader)
          }
          else -> break
        }
      }
      GetHuman.Data(
        human = human!!,
        node = node!!
      )
    }
  }

  override fun toResponse(writer: ResponseWriter, value: GetHuman.Data) {
    writer.writeObject(RESPONSE_FIELDS[0]) { writer ->
      Human.toResponse(writer, value.human)
    }
    writer.writeObject(RESPONSE_FIELDS[1]) { writer ->
      Node.toResponse(writer, value.node)
    }
  }

  object Human : ResponseAdapter<GetHuman.Data.Human> {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
        responseName = "id",
        fieldName = "id",
        arguments = emptyMap(),
        conditions = emptyList(),
        possibleFieldSets = emptyMap(),
      ),
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
        responseName = "name",
        fieldName = "name",
        arguments = emptyMap(),
        conditions = emptyList(),
        possibleFieldSets = emptyMap(),
      ),
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("Float")),
        responseName = "height",
        fieldName = "height",
        arguments = emptyMap(),
        conditions = emptyList(),
        possibleFieldSets = emptyMap(),
      )
    )

    override fun fromResponse(reader: ResponseReader, __typename: String?): GetHuman.Data.Human {
      return reader.run {
        var id: String? = null
        var name: String? = null
        var height: Double? = null
        while(true) {
          when (selectField(RESPONSE_FIELDS)) {
            0 -> id = readString(RESPONSE_FIELDS[0])
            1 -> name = readString(RESPONSE_FIELDS[1])
            2 -> height = readDouble(RESPONSE_FIELDS[2])
            else -> break
          }
        }
        GetHuman.Data.Human(
          id = id!!,
          name = name!!,
          height = height!!
        )
      }
    }

    override fun toResponse(writer: ResponseWriter, value: GetHuman.Data.Human) {
      writer.writeString(RESPONSE_FIELDS[0], value.id)
      writer.writeString(RESPONSE_FIELDS[1], value.name)
      writer.writeDouble(RESPONSE_FIELDS[2], value.height)
    }
  }

  object Node : ResponseAdapter<GetHuman.Data.Node> {
<<<<<<< HEAD
    private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
        responseName = "__typename",
        fieldName = "__typename",
        arguments = emptyMap(),
        conditions = emptyList(),
      )
    )

=======
>>>>>>> e374eee24... forward subfields
    override fun fromResponse(reader: ResponseReader, __typename: String?): GetHuman.Data.Node {
      val typename = __typename ?: reader.readString(ResponseField.Typename)
      return when(typename) {
        "Human" -> HumanNode.fromResponse(reader, typename)
        else -> OtherNode.fromResponse(reader, typename)
      }
    }

    override fun toResponse(writer: ResponseWriter, value: GetHuman.Data.Node) {
      when(value) {
        is GetHuman.Data.Node.HumanNode -> HumanNode.toResponse(writer, value)
        is GetHuman.Data.Node.OtherNode -> OtherNode.toResponse(writer, value)
      }
    }

    object HumanNode : ResponseAdapter<GetHuman.Data.Node.HumanNode> {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          responseName = "__typename",
          fieldName = "__typename",
          arguments = emptyMap(),
          conditions = emptyList(),
          possibleFieldSets = emptyMap(),
        ),
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("Float")),
          responseName = "height",
          fieldName = "height",
          arguments = emptyMap(),
          conditions = emptyList(),
          possibleFieldSets = emptyMap(),
        )
      )

      override fun fromResponse(reader: ResponseReader, __typename: String?):
          GetHuman.Data.Node.HumanNode {
        return reader.run {
          var __typename: String? = __typename
          var height: Double? = null
          while(true) {
            when (selectField(RESPONSE_FIELDS)) {
              0 -> __typename = readString(RESPONSE_FIELDS[0])
              1 -> height = readDouble(RESPONSE_FIELDS[1])
              else -> break
            }
          }
          GetHuman.Data.Node.HumanNode(
            __typename = __typename!!,
            height = height!!
          )
        }
      }

      override fun toResponse(writer: ResponseWriter, value: GetHuman.Data.Node.HumanNode) {
        writer.writeString(RESPONSE_FIELDS[0], value.__typename)
        writer.writeDouble(RESPONSE_FIELDS[1], value.height)
      }
    }

    object OtherNode : ResponseAdapter<GetHuman.Data.Node.OtherNode> {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          responseName = "__typename",
          fieldName = "__typename",
          arguments = emptyMap(),
          conditions = emptyList(),
          possibleFieldSets = emptyMap(),
        )
      )

      override fun fromResponse(reader: ResponseReader, __typename: String?):
          GetHuman.Data.Node.OtherNode {
        return reader.run {
          var __typename: String? = __typename
          while(true) {
            when (selectField(RESPONSE_FIELDS)) {
              0 -> __typename = readString(RESPONSE_FIELDS[0])
              else -> break
            }
          }
          GetHuman.Data.Node.OtherNode(
            __typename = __typename!!
          )
        }
      }

      override fun toResponse(writer: ResponseWriter, value: GetHuman.Data.Node.OtherNode) {
        writer.writeString(RESPONSE_FIELDS[0], value.__typename)
      }
    }
  }
}
