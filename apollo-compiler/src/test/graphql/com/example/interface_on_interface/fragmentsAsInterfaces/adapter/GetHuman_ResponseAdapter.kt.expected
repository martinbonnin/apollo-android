// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.interface_on_interface.adapter

import com.apollographql.apollo3.api.DoubleResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.example.interface_on_interface.GetHuman
import kotlin.Array
import kotlin.Double
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
object GetHuman_ResponseAdapter : ResponseAdapter<GetHuman.Data> {
  val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
    ResponseField(
      type = ResponseField.Type.NotNull(ResponseField.Type.Named.Object("Human")),
      fieldName = "human",
      fieldSets = listOf(
        ResponseField.FieldSet(null, Human.RESPONSE_FIELDS)
      ),
    ),
    ResponseField(
      type = ResponseField.Type.NotNull(ResponseField.Type.Named.Object("Node")),
      fieldName = "node",
      fieldSets = listOf(
        ResponseField.FieldSet("Human", Node.HumanNode.RESPONSE_FIELDS),
        ResponseField.FieldSet(null, Node.OtherNode.RESPONSE_FIELDS),
      ),
    )
  )

  val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

  override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
      GetHuman.Data {
    var human: GetHuman.Data.Human? = null
    var node: GetHuman.Data.Node? = null
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> human = Human.obj().fromResponse(reader, responseAdapterCache)
        1 -> node = Node.obj().fromResponse(reader, responseAdapterCache)
        else -> break
      }
    }
    return GetHuman.Data(
      human = human!!,
      node = node!!
    )
  }

  override fun toResponse(
    writer: JsonWriter,
    responseAdapterCache: ResponseAdapterCache,
    value: GetHuman.Data
  ) {
    writer.beginObject()
    writer.name("human")
    Human.obj().toResponse(writer, responseAdapterCache, value.human)
    writer.name("node")
    Node.obj().toResponse(writer, responseAdapterCache, value.node)
    writer.endObject()
  }

  object Human : ResponseAdapter<GetHuman.Data.Human> {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
        fieldName = "id",
      ),
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
        fieldName = "name",
      ),
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("Float")),
        fieldName = "height",
      )
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        GetHuman.Data.Human {
      var id: String? = null
      var name: String? = null
      var height: Double? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> id = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
          1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
          2 -> height = DoubleResponseAdapter.fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      return GetHuman.Data.Human(
        id = id!!,
        name = name!!,
        height = height!!
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: GetHuman.Data.Human
    ) {
      writer.beginObject()
      writer.name("id")
      StringResponseAdapter.toResponse(writer, responseAdapterCache, value.id)
      writer.name("name")
      StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
      writer.name("height")
      DoubleResponseAdapter.toResponse(writer, responseAdapterCache, value.height)
      writer.endObject()
    }
  }

  object Node : ResponseAdapter<GetHuman.Data.Node> {
    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        GetHuman.Data.Node {
      check(reader.nextName() == "__typename")
      val typename = reader.nextString()!!
      return when(typename) {
        "Human" -> HumanNode.fromResponse(reader, responseAdapterCache, typename)
        else -> OtherNode.fromResponse(reader, responseAdapterCache, typename)
      }
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: GetHuman.Data.Node
    ) {
      when(value) {
        is GetHuman.Data.Node.HumanNode -> HumanNode.toResponse(writer, responseAdapterCache, value)
        is GetHuman.Data.Node.OtherNode -> OtherNode.toResponse(writer, responseAdapterCache, value)
      }
    }

    object HumanNode {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename,
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("Float")),
          fieldName = "height",
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String?
      ): GetHuman.Data.Node.HumanNode {
        var __typename: String? = __typename
        var height: Double? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> height = DoubleResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return GetHuman.Data.Node.HumanNode(
          __typename = __typename!!,
          height = height!!
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: GetHuman.Data.Node.HumanNode
      ) {
        writer.beginObject()
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("height")
        DoubleResponseAdapter.toResponse(writer, responseAdapterCache, value.height)
        writer.endObject()
      }
    }

    object OtherNode {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String?
      ): GetHuman.Data.Node.OtherNode {
        var __typename: String? = __typename
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return GetHuman.Data.Node.OtherNode(
          __typename = __typename!!
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: GetHuman.Data.Node.OtherNode
      ) {
        writer.beginObject()
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.endObject()
      }
    }
  }
}
