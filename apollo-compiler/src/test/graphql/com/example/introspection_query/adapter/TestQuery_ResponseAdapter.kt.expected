// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.introspection_query.adapter

import com.apollographql.apollo3.api.NullableStringResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.obj
import com.example.introspection_query.TestQuery
import kotlin.Array
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
object TestQuery_ResponseAdapter : ResponseAdapter<TestQuery.Data> {
  val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
    ResponseField(
      type = ResponseField.Type.NotNull(ResponseField.Type.Named.Object("__Schema")),
      fieldName = "__schema",
      fieldSets = listOf(
        ResponseField.FieldSet(null, __Schema.RESPONSE_FIELDS)
      ),
    ),
    ResponseField(
      type = ResponseField.Type.NotNull(ResponseField.Type.Named.Object("__Type")),
      fieldName = "__type",
      arguments = mapOf<String, Any?>(
        "name" to "Vehicle"),
      fieldSets = listOf(
        ResponseField.FieldSet(null, __Type.RESPONSE_FIELDS)
      ),
    )
  )

  val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

  override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
      TestQuery.Data {
    var __schema: TestQuery.Data.__Schema? = null
    var __type: TestQuery.Data.__Type? = null
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> __schema = __Schema.obj().fromResponse(reader, responseAdapterCache)
        1 -> __type = __Type.obj().fromResponse(reader, responseAdapterCache)
        else -> break
      }
    }
    return TestQuery.Data(
      __schema = __schema!!,
      __type = __type!!
    )
  }

  override fun toResponse(
    writer: JsonWriter,
    responseAdapterCache: ResponseAdapterCache,
    value: TestQuery.Data
  ) {
    writer.name("__schema")
    __Schema.obj().toResponse(writer, responseAdapterCache, value.__schema)
    writer.name("__type")
    __Type.obj().toResponse(writer, responseAdapterCache, value.__type)
  }

  object __Schema : ResponseAdapter<TestQuery.Data.__Schema> {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Object("__Type")),
        fieldName = "queryType",
        fieldSets = listOf(
          ResponseField.FieldSet(null, QueryType.RESPONSE_FIELDS)
        ),
      ),
      ResponseField(
        type =
            ResponseField.Type.NotNull(ResponseField.Type.List(ResponseField.Type.NotNull(ResponseField.Type.Named.Object("__Type")))),
        fieldName = "types",
        fieldSets = listOf(
          ResponseField.FieldSet(null, Types.RESPONSE_FIELDS)
        ),
      )
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        TestQuery.Data.__Schema {
      var queryType: TestQuery.Data.__Schema.QueryType? = null
      var types: List<TestQuery.Data.__Schema.Types>? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> queryType = QueryType.obj().fromResponse(reader, responseAdapterCache)
          1 -> types = Types.obj().list().fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      return TestQuery.Data.__Schema(
        queryType = queryType!!,
        types = types!!
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: TestQuery.Data.__Schema
    ) {
      writer.name("queryType")
      QueryType.obj().toResponse(writer, responseAdapterCache, value.queryType)
      writer.name("types")
      Types.obj().list().toResponse(writer, responseAdapterCache, value.types)
    }

    object QueryType : ResponseAdapter<TestQuery.Data.__Schema.QueryType> {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.Named.Other("String"),
          fieldName = "name",
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestQuery.Data.__Schema.QueryType {
        var name: String? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> name = NullableStringResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.__Schema.QueryType(
          name = name
        )
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.__Schema.QueryType
      ) {
        writer.name("name")
        NullableStringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
      }
    }

    object Types : ResponseAdapter<TestQuery.Data.__Schema.Types> {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.Named.Other("String"),
          fieldName = "name",
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestQuery.Data.__Schema.Types {
        var name: String? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> name = NullableStringResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.__Schema.Types(
          name = name
        )
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.__Schema.Types
      ) {
        writer.name("name")
        NullableStringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
      }
    }
  }

  object __Type : ResponseAdapter<TestQuery.Data.__Type> {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField(
        type = ResponseField.Type.Named.Other("String"),
        fieldName = "name",
      )
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        TestQuery.Data.__Type {
      var name: String? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> name = NullableStringResponseAdapter.fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      return TestQuery.Data.__Type(
        name = name
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: TestQuery.Data.__Type
    ) {
      writer.name("name")
      NullableStringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
    }
  }
}
