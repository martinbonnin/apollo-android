// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.named_fragment_with_variables.adapter

import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.api.internal.ResponseAdapter
import com.apollographql.apollo.api.internal.ResponseReader
import com.apollographql.apollo.api.internal.ResponseWriter
import com.example.named_fragment_with_variables.GetUser
import kotlin.Array
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
object GetUser_ResponseAdapter : ResponseAdapter<GetUser.Data> {
<<<<<<< HEAD
  private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
    ResponseField(
      type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
      responseName = "__typename",
      fieldName = "__typename",
      arguments = emptyMap(),
      conditions = emptyList(),
    )
  )

=======
>>>>>>> e374eee24... forward subfields
  override fun fromResponse(reader: ResponseReader, __typename: String?): GetUser.Data {
    val typename = __typename ?: reader.readString(ResponseField.Typename)
    return when(typename) {
      "Query" -> QueryData.fromResponse(reader, typename)
      else -> OtherData.fromResponse(reader, typename)
    }
  }

  override fun toResponse(writer: ResponseWriter, value: GetUser.Data) {
    when(value) {
      is GetUser.Data.QueryData -> QueryData.toResponse(writer, value)
      is GetUser.Data.OtherData -> OtherData.toResponse(writer, value)
    }
  }

  object QueryData : ResponseAdapter<GetUser.Data.QueryData> {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
        responseName = "__typename",
        fieldName = "__typename",
        arguments = emptyMap(),
        conditions = emptyList(),
        possibleFieldSets = emptyMap(),
      ),
      ResponseField(
        type = ResponseField.Type.Named.Object("Organization"),
        responseName = "organization",
        fieldName = "organization",
        arguments = mapOf<String, Any?>(
          "id" to mapOf<String, Any?>(
            "kind" to "Variable",
            "variableName" to "organizationId")),
        conditions = emptyList(),
        possibleFieldSets = mapOf(
          "" to Organization.RESPONSE_FIELDS
        ),
      )
    )

    override fun fromResponse(reader: ResponseReader, __typename: String?): GetUser.Data.QueryData {
      return reader.run {
        var __typename: String? = __typename
        var organization: GetUser.Data.QueryData.Organization? = null
        while(true) {
          when (selectField(RESPONSE_FIELDS)) {
            0 -> __typename = readString(RESPONSE_FIELDS[0])
            1 -> organization = readObject<GetUser.Data.QueryData.Organization>(RESPONSE_FIELDS[1]) { reader ->
              Organization.fromResponse(reader)
            }
            else -> break
          }
        }
        GetUser.Data.QueryData(
          __typename = __typename!!,
          organization = organization
        )
      }
    }

    override fun toResponse(writer: ResponseWriter, value: GetUser.Data.QueryData) {
      writer.writeString(RESPONSE_FIELDS[0], value.__typename)
      if(value.organization == null) {
        writer.writeObject(RESPONSE_FIELDS[1], null)
      } else {
        writer.writeObject(RESPONSE_FIELDS[1]) { writer ->
          Organization.toResponse(writer, value.organization)
        }
      }
    }

    object Organization : ResponseAdapter<GetUser.Data.QueryData.Organization> {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          responseName = "id",
          fieldName = "id",
          arguments = emptyMap(),
          conditions = emptyList(),
          possibleFieldSets = emptyMap(),
        ),
        ResponseField(
          type =
              ResponseField.Type.NotNull(ResponseField.Type.List(ResponseField.Type.NotNull(ResponseField.Type.Named.Object("User")))),
          responseName = "user",
          fieldName = "user",
          arguments = mapOf<String, Any?>(
            "query" to mapOf<String, Any?>(
              "kind" to "Variable",
              "variableName" to "query")),
          conditions = emptyList(),
          possibleFieldSets = mapOf(
            "User" to User.UserUser.RESPONSE_FIELDS,
            "" to User.OtherUser.RESPONSE_FIELDS,
          ),
        )
      )

      override fun fromResponse(reader: ResponseReader, __typename: String?):
          GetUser.Data.QueryData.Organization {
        return reader.run {
          var id: String? = null
          var user: List<GetUser.Data.QueryData.Organization.User>? = null
          while(true) {
            when (selectField(RESPONSE_FIELDS)) {
              0 -> id = readString(RESPONSE_FIELDS[0])
              1 -> user = readList<GetUser.Data.QueryData.Organization.User>(RESPONSE_FIELDS[1]) { reader ->
                reader.readObject<GetUser.Data.QueryData.Organization.User> { reader ->
                  User.fromResponse(reader)
                }
              }?.map { it!! }
              else -> break
            }
          }
          GetUser.Data.QueryData.Organization(
            id = id!!,
            user = user!!
          )
        }
      }

      override fun toResponse(writer: ResponseWriter, value: GetUser.Data.QueryData.Organization) {
        writer.writeString(RESPONSE_FIELDS[0], value.id)
        writer.writeList(RESPONSE_FIELDS[1], value.user) { value, listItemWriter ->
          listItemWriter.writeObject { writer ->
            User.toResponse(writer, value)
          }
        }
      }

      object User : ResponseAdapter<GetUser.Data.QueryData.Organization.User> {
<<<<<<< HEAD
        private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
            responseName = "__typename",
            fieldName = "__typename",
            arguments = emptyMap(),
            conditions = emptyList(),
          )
        )

=======
>>>>>>> e374eee24... forward subfields
        override fun fromResponse(reader: ResponseReader, __typename: String?):
            GetUser.Data.QueryData.Organization.User {
          val typename = __typename ?: reader.readString(ResponseField.Typename)
          return when(typename) {
            "User" -> UserUser.fromResponse(reader, typename)
            else -> OtherUser.fromResponse(reader, typename)
          }
        }

        override fun toResponse(writer: ResponseWriter,
            value: GetUser.Data.QueryData.Organization.User) {
          when(value) {
            is GetUser.Data.QueryData.Organization.User.UserUser -> UserUser.toResponse(writer, value)
            is GetUser.Data.QueryData.Organization.User.OtherUser -> OtherUser.toResponse(writer, value)
          }
        }

        object UserUser : ResponseAdapter<GetUser.Data.QueryData.Organization.User.UserUser> {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              responseName = "__typename",
              fieldName = "__typename",
              arguments = emptyMap(),
              conditions = emptyList(),
              possibleFieldSets = emptyMap(),
            ),
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              responseName = "firstName",
              fieldName = "firstName",
              arguments = emptyMap(),
              conditions = emptyList(),
              possibleFieldSets = emptyMap(),
            ),
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              responseName = "lastName",
              fieldName = "lastName",
              arguments = emptyMap(),
              conditions = emptyList(),
              possibleFieldSets = emptyMap(),
            ),
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              responseName = "avatar",
              fieldName = "avatar",
              arguments = mapOf<String, Any?>(
                "size" to mapOf<String, Any?>(
                  "kind" to "Variable",
                  "variableName" to "size")),
              conditions = emptyList(),
              possibleFieldSets = emptyMap(),
            )
          )

          override fun fromResponse(reader: ResponseReader, __typename: String?):
              GetUser.Data.QueryData.Organization.User.UserUser {
            return reader.run {
              var __typename: String? = __typename
              var firstName: String? = null
              var lastName: String? = null
              var avatar: String? = null
              while(true) {
                when (selectField(RESPONSE_FIELDS)) {
                  0 -> __typename = readString(RESPONSE_FIELDS[0])
                  1 -> firstName = readString(RESPONSE_FIELDS[1])
                  2 -> lastName = readString(RESPONSE_FIELDS[2])
                  3 -> avatar = readString(RESPONSE_FIELDS[3])
                  else -> break
                }
              }
              GetUser.Data.QueryData.Organization.User.UserUser(
                __typename = __typename!!,
                firstName = firstName!!,
                lastName = lastName!!,
                avatar = avatar!!
              )
            }
          }

          override fun toResponse(writer: ResponseWriter,
              value: GetUser.Data.QueryData.Organization.User.UserUser) {
            writer.writeString(RESPONSE_FIELDS[0], value.__typename)
            writer.writeString(RESPONSE_FIELDS[1], value.firstName)
            writer.writeString(RESPONSE_FIELDS[2], value.lastName)
            writer.writeString(RESPONSE_FIELDS[3], value.avatar)
          }
        }

        object OtherUser : ResponseAdapter<GetUser.Data.QueryData.Organization.User.OtherUser> {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              responseName = "__typename",
              fieldName = "__typename",
              arguments = emptyMap(),
              conditions = emptyList(),
              possibleFieldSets = emptyMap(),
            )
          )

          override fun fromResponse(reader: ResponseReader, __typename: String?):
              GetUser.Data.QueryData.Organization.User.OtherUser {
            return reader.run {
              var __typename: String? = __typename
              while(true) {
                when (selectField(RESPONSE_FIELDS)) {
                  0 -> __typename = readString(RESPONSE_FIELDS[0])
                  else -> break
                }
              }
              GetUser.Data.QueryData.Organization.User.OtherUser(
                __typename = __typename!!
              )
            }
          }

          override fun toResponse(writer: ResponseWriter,
              value: GetUser.Data.QueryData.Organization.User.OtherUser) {
            writer.writeString(RESPONSE_FIELDS[0], value.__typename)
          }
        }
      }
    }
  }

  object OtherData : ResponseAdapter<GetUser.Data.OtherData> {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
        responseName = "__typename",
        fieldName = "__typename",
        arguments = emptyMap(),
        conditions = emptyList(),
        possibleFieldSets = emptyMap(),
      )
    )

    override fun fromResponse(reader: ResponseReader, __typename: String?): GetUser.Data.OtherData {
      return reader.run {
        var __typename: String? = __typename
        while(true) {
          when (selectField(RESPONSE_FIELDS)) {
            0 -> __typename = readString(RESPONSE_FIELDS[0])
            else -> break
          }
        }
        GetUser.Data.OtherData(
          __typename = __typename!!
        )
      }
    }

    override fun toResponse(writer: ResponseWriter, value: GetUser.Data.OtherData) {
      writer.writeString(RESPONSE_FIELDS[0], value.__typename)
    }
  }
}
