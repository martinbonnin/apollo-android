// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.named_fragment_with_variables.adapter

import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.Variable
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.named_fragment_with_variables.GetUser
import kotlin.Array
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
object GetUser_ResponseAdapter : ResponseAdapter<GetUser.Data> {
  override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
      GetUser.Data {
    check(reader.nextName() == "__typename")
    val typename = reader.nextString()!!
    return when(typename) {
      "Query" -> QueryData.fromResponse(reader, responseAdapterCache, typename)
      else -> OtherData.fromResponse(reader, responseAdapterCache, typename)
    }
  }

  override fun toResponse(
    writer: JsonWriter,
    responseAdapterCache: ResponseAdapterCache,
    value: GetUser.Data
  ) {
    when(value) {
      is GetUser.Data.QueryData -> QueryData.toResponse(writer, responseAdapterCache, value)
      is GetUser.Data.OtherData -> OtherData.toResponse(writer, responseAdapterCache, value)
    }
  }

  object QueryData {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.Typename,
      ResponseField(
        type = ResponseField.Type.Named.Object("Organization"),
        fieldName = "organization",
        arguments = mapOf<String, Any?>(
          "id" to Variable("organizationId")),
        fieldSets = listOf(
          ResponseField.FieldSet(null, Organization.RESPONSE_FIELDS)
        ),
      )
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

    fun fromResponse(
      reader: JsonReader,
      responseAdapterCache: ResponseAdapterCache,
      __typename: String?
    ): GetUser.Data.QueryData {
      var __typename: String? = __typename
      var organization: GetUser.Data.QueryData.Organization? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
          1 -> organization = Organization.obj().nullable().fromResponse(reader,
              responseAdapterCache)
          else -> break
        }
      }
      return GetUser.Data.QueryData(
        __typename = __typename!!,
        organization = organization
      )
    }

    fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: GetUser.Data.QueryData
    ) {
      writer.beginObject()
      writer.name("__typename")
      StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
      writer.name("organization")
      Organization.obj().nullable().toResponse(writer, responseAdapterCache, value.organization)
      writer.endObject()
    }

    object Organization : ResponseAdapter<GetUser.Data.QueryData.Organization> {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          fieldName = "id",
        ),
        ResponseField(
          type =
              ResponseField.Type.NotNull(ResponseField.Type.List(ResponseField.Type.NotNull(ResponseField.Type.Named.Object("User")))),
          fieldName = "user",
          arguments = mapOf<String, Any?>(
            "query" to Variable("query")),
          fieldSets = listOf(
            ResponseField.FieldSet("User", User.UserUser.RESPONSE_FIELDS),
            ResponseField.FieldSet(null, User.OtherUser.RESPONSE_FIELDS),
          ),
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          GetUser.Data.QueryData.Organization {
        var id: String? = null
        var user: List<GetUser.Data.QueryData.Organization.User>? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> id = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> user = User.obj().list().fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return GetUser.Data.QueryData.Organization(
          id = id!!,
          user = user!!
        )
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: GetUser.Data.QueryData.Organization
      ) {
        writer.beginObject()
        writer.name("id")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.id)
        writer.name("user")
        User.obj().list().toResponse(writer, responseAdapterCache, value.user)
        writer.endObject()
      }

      object User : ResponseAdapter<GetUser.Data.QueryData.Organization.User> {
        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            GetUser.Data.QueryData.Organization.User {
          check(reader.nextName() == "__typename")
          val typename = reader.nextString()!!
          return when(typename) {
            "User" -> UserUser.fromResponse(reader, responseAdapterCache, typename)
            else -> OtherUser.fromResponse(reader, responseAdapterCache, typename)
          }
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: GetUser.Data.QueryData.Organization.User
        ) {
          when(value) {
            is GetUser.Data.QueryData.Organization.User.UserUser -> UserUser.toResponse(writer, responseAdapterCache, value)
            is GetUser.Data.QueryData.Organization.User.OtherUser -> OtherUser.toResponse(writer, responseAdapterCache, value)
          }
        }

        object UserUser {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField.Typename,
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              fieldName = "firstName",
            ),
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              fieldName = "lastName",
            ),
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              fieldName = "avatar",
              arguments = mapOf<String, Any?>(
                "size" to Variable("size")),
            )
          )

          val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

          fun fromResponse(
            reader: JsonReader,
            responseAdapterCache: ResponseAdapterCache,
            __typename: String?
          ): GetUser.Data.QueryData.Organization.User.UserUser {
            var __typename: String? = __typename
            var firstName: String? = null
            var lastName: String? = null
            var avatar: String? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                1 -> firstName = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                2 -> lastName = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                3 -> avatar = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                else -> break
              }
            }
            return GetUser.Data.QueryData.Organization.User.UserUser(
              __typename = __typename!!,
              firstName = firstName!!,
              lastName = lastName!!,
              avatar = avatar!!
            )
          }

          fun toResponse(
            writer: JsonWriter,
            responseAdapterCache: ResponseAdapterCache,
            value: GetUser.Data.QueryData.Organization.User.UserUser
          ) {
            writer.beginObject()
            writer.name("__typename")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
            writer.name("firstName")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.firstName)
            writer.name("lastName")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.lastName)
            writer.name("avatar")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.avatar)
            writer.endObject()
          }
        }

        object OtherUser {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField.Typename
          )

          val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

          fun fromResponse(
            reader: JsonReader,
            responseAdapterCache: ResponseAdapterCache,
            __typename: String?
          ): GetUser.Data.QueryData.Organization.User.OtherUser {
            var __typename: String? = __typename
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                else -> break
              }
            }
            return GetUser.Data.QueryData.Organization.User.OtherUser(
              __typename = __typename!!
            )
          }

          fun toResponse(
            writer: JsonWriter,
            responseAdapterCache: ResponseAdapterCache,
            value: GetUser.Data.QueryData.Organization.User.OtherUser
          ) {
            writer.beginObject()
            writer.name("__typename")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
            writer.endObject()
          }
        }
      }
    }
  }

  object OtherData {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.Typename
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

    fun fromResponse(
      reader: JsonReader,
      responseAdapterCache: ResponseAdapterCache,
      __typename: String?
    ): GetUser.Data.OtherData {
      var __typename: String? = __typename
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      return GetUser.Data.OtherData(
        __typename = __typename!!
      )
    }

    fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: GetUser.Data.OtherData
    ) {
      writer.beginObject()
      writer.name("__typename")
      StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
      writer.endObject()
    }
  }
}
