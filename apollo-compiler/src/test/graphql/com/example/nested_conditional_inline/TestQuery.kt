// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.nested_conditional_inline

import com.apollographql.apollo.api.Input
import com.apollographql.apollo.api.Operation
import com.apollographql.apollo.api.Query
import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.api.internal.InputFieldMarshaller
import com.apollographql.apollo.api.internal.QueryDocumentMinifier
import com.apollographql.apollo.api.internal.ResponseAdapter
import com.example.nested_conditional_inline.adapter.TestQuery_ResponseAdapter
import com.example.nested_conditional_inline.type.Episode
import kotlin.Any
import kotlin.Array
import kotlin.Double
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import kotlin.collections.Map
import kotlin.jvm.Transient

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
data class TestQuery(
  val episode: Input<Episode> = Input.absent()
) : Query<TestQuery.Data> {
  @Transient
  private val variables: Operation.Variables = object : Operation.Variables() {
    override fun valueMap(): Map<String, Any?> = mutableMapOf<String, Any?>().apply {
      if (this@TestQuery.episode.defined) {
        this["episode"] = this@TestQuery.episode.value
      }
    }

    override fun marshaller(): InputFieldMarshaller {
      return InputFieldMarshaller.invoke { writer ->
        if (this@TestQuery.episode.defined) {
          writer.writeString("episode", this@TestQuery.episode.value?.rawValue)
        }
      }
    }
  }

  override fun operationId(): String = OPERATION_ID

  override fun queryDocument(): String = QUERY_DOCUMENT

  override fun variables(): Operation.Variables = variables

  override fun name(): String = OPERATION_NAME

  override fun adapter(): ResponseAdapter<Data> = TestQuery_ResponseAdapter
  override fun responseFields(): Array<ResponseField> = TestQuery_ResponseAdapter.RESPONSE_FIELDS
  /**
   * The query type, represents all of the entry points into our object graph
   */
  data class Data(
    val hero: Hero?
  ) : Operation.Data {
    /**
     * A character from the Star Wars universe
     */
    interface Hero {
      val __typename: String

      /**
       * The name of the character
       */
      val name: String

      interface Human : Hero {
        override val __typename: String

        /**
         * The name of the character
         */
        override val name: String

        /**
         * This human's friends, or an empty list if they have none
         */
        val friends: List<Friend?>?

        /**
         * A character from the Star Wars universe
         */
        interface Friend {
          val __typename: String

          /**
           * The name of the character
           */
          val name: String

          interface Human : Friend {
            override val __typename: String

            /**
             * The name of the character
             */
            override val name: String

            /**
             * Height in the preferred unit, default is meters
             */
            val height: Double?
          }

          companion object {
            fun Friend.asHuman(): Human? = this as? Human
          }
        }
      }

      interface Droid : Hero {
        override val __typename: String

        /**
         * The name of the character
         */
        override val name: String

        /**
         * This droid's friends, or an empty list if they have none
         */
        val friends: List<Friend?>?

        /**
         * A character from the Star Wars universe
         */
        interface Friend {
          val __typename: String

          /**
           * The name of the character
           */
          val name: String

          interface Human : Friend {
            override val __typename: String

            /**
             * The name of the character
             */
            override val name: String

            /**
             * Height in the preferred unit, default is meters
             */
            val height: Double?
          }

          companion object {
            fun Friend.asHuman(): Human? = this as? Human
          }
        }
      }

      data class HumanHero(
        override val __typename: String,
        /**
         * The name of the character
         */
        override val name: String,
        /**
         * This human's friends, or an empty list if they have none
         */
        override val friends: List<Friend?>?
      ) : Hero, Human {
        /**
         * A character from the Star Wars universe
         */
        interface Friend : Human.Friend {
          override val __typename: String

          data class HumanFriend(
            override val __typename: String,
            /**
             * The name of the character
             */
            override val name: String,
            /**
             * Height in the preferred unit, default is meters
             */
            override val height: Double?
          ) : Human.Friend, Human.Friend.Human, Friend

          data class OtherFriend(
            override val __typename: String,
            /**
             * The name of the character
             */
            override val name: String
          ) : Human.Friend, Friend
        }
      }

      data class DroidHero(
        override val __typename: String,
        /**
         * The name of the character
         */
        override val name: String,
        /**
         * This droid's friends, or an empty list if they have none
         */
        override val friends: List<Friend?>?
      ) : Hero, Droid {
        /**
         * A character from the Star Wars universe
         */
        interface Friend : Droid.Friend {
          override val __typename: String

          data class HumanFriend(
            override val __typename: String,
            /**
             * The name of the character
             */
            override val name: String,
            /**
             * Height in the preferred unit, default is meters
             */
            override val height: Double?
          ) : Droid.Friend, Droid.Friend.Human, Friend

          data class OtherFriend(
            override val __typename: String,
            /**
             * The name of the character
             */
            override val name: String
          ) : Droid.Friend, Friend
        }
      }

      data class OtherHero(
        override val __typename: String,
        /**
         * The name of the character
         */
        override val name: String
      ) : Hero

      companion object {
        fun Hero.asHuman(): Human? = this as? Human

        fun Hero.asDroid(): Droid? = this as? Droid
      }
    }
  }

  companion object {
    const val OPERATION_ID: String =
        "a9f066a7d1092096ab154f16f32114a4bd71e959b789f37879249cdf6309ea86"

    val QUERY_DOCUMENT: String = QueryDocumentMinifier.minify(
          """
          |query TestQuery(${'$'}episode: Episode) {
          |  hero(episode: ${'$'}episode) {
          |    __typename
          |    name
          |    ... on Human {
          |      friends {
          |        __typename
          |        name
          |        ... on Human {
          |          height(unit: FOOT)
          |        }
          |      }
          |    }
          |    ... on Droid {
          |      friends {
          |        __typename
          |        name
          |        ... on Human {
          |          height(unit: METER)
          |        }
          |      }
          |    }
          |  }
          |}
          """.trimMargin()
        )

    val OPERATION_NAME: String = "TestQuery"
  }
}
