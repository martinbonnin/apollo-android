// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.root_query_fragment_with_nested_fragments.adapter

import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.api.internal.ResponseAdapter
import com.apollographql.apollo.api.internal.ResponseReader
import com.apollographql.apollo.api.internal.ResponseWriter
import com.example.root_query_fragment_with_nested_fragments.TestQuery
import kotlin.Array
import kotlin.String
import kotlin.Suppress

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
object TestQuery_ResponseAdapter : ResponseAdapter<TestQuery.Data> {
<<<<<<< HEAD
  private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
    ResponseField(
      type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
      responseName = "__typename",
      fieldName = "__typename",
      arguments = emptyMap(),
      conditions = emptyList(),
    )
  )

=======
>>>>>>> e374eee24... forward subfields
  override fun fromResponse(reader: ResponseReader, __typename: String?): TestQuery.Data {
    val typename = __typename ?: reader.readString(ResponseField.Typename)
    return when(typename) {
      "Query" -> QueryData.fromResponse(reader, typename)
      else -> OtherData.fromResponse(reader, typename)
    }
  }

  override fun toResponse(writer: ResponseWriter, value: TestQuery.Data) {
    when(value) {
      is TestQuery.Data.QueryData -> QueryData.toResponse(writer, value)
      is TestQuery.Data.OtherData -> OtherData.toResponse(writer, value)
    }
  }

  object QueryData : ResponseAdapter<TestQuery.Data.QueryData> {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
        responseName = "__typename",
        fieldName = "__typename",
        arguments = emptyMap(),
        conditions = emptyList(),
        possibleFieldSets = emptyMap(),
      ),
      ResponseField(
        type = ResponseField.Type.Named.Object("Character"),
        responseName = "hero",
        fieldName = "hero",
        arguments = emptyMap(),
        conditions = emptyList(),
        possibleFieldSets = mapOf(
          "Droid" to Hero.CharacterHero.RESPONSE_FIELDS,
          "Human" to Hero.CharacterHero.RESPONSE_FIELDS,
          "" to Hero.OtherHero.RESPONSE_FIELDS,
        ),
      ),
      ResponseField(
        type = ResponseField.Type.Named.Object("Droid"),
        responseName = "droid",
        fieldName = "droid",
        arguments = mapOf<String, Any?>(
          "id" to 1),
        conditions = emptyList(),
        possibleFieldSets = mapOf(
          "Droid" to Droid.DroidDroid.RESPONSE_FIELDS,
          "" to Droid.OtherDroid.RESPONSE_FIELDS,
        ),
      ),
      ResponseField(
        type = ResponseField.Type.Named.Object("Human"),
        responseName = "human",
        fieldName = "human",
        arguments = mapOf<String, Any?>(
          "id" to 1),
        conditions = emptyList(),
        possibleFieldSets = mapOf(
          "Human" to Human.HumanHuman.RESPONSE_FIELDS,
          "" to Human.OtherHuman.RESPONSE_FIELDS,
        ),
      )
    )

    override fun fromResponse(reader: ResponseReader, __typename: String?):
        TestQuery.Data.QueryData {
      return reader.run {
        var __typename: String? = __typename
        var hero: TestQuery.Data.QueryData.Hero? = null
        var droid: TestQuery.Data.QueryData.Droid? = null
        var human: TestQuery.Data.QueryData.Human? = null
        while(true) {
          when (selectField(RESPONSE_FIELDS)) {
            0 -> __typename = readString(RESPONSE_FIELDS[0])
            1 -> hero = readObject<TestQuery.Data.QueryData.Hero>(RESPONSE_FIELDS[1]) { reader ->
              Hero.fromResponse(reader)
            }
            2 -> droid = readObject<TestQuery.Data.QueryData.Droid>(RESPONSE_FIELDS[2]) { reader ->
              Droid.fromResponse(reader)
            }
            3 -> human = readObject<TestQuery.Data.QueryData.Human>(RESPONSE_FIELDS[3]) { reader ->
              Human.fromResponse(reader)
            }
            else -> break
          }
        }
        TestQuery.Data.QueryData(
          __typename = __typename!!,
          hero = hero,
          droid = droid,
          human = human
        )
      }
    }

    override fun toResponse(writer: ResponseWriter, value: TestQuery.Data.QueryData) {
      writer.writeString(RESPONSE_FIELDS[0], value.__typename)
      if(value.hero == null) {
        writer.writeObject(RESPONSE_FIELDS[1], null)
      } else {
        writer.writeObject(RESPONSE_FIELDS[1]) { writer ->
          Hero.toResponse(writer, value.hero)
        }
      }
      if(value.droid == null) {
        writer.writeObject(RESPONSE_FIELDS[2], null)
      } else {
        writer.writeObject(RESPONSE_FIELDS[2]) { writer ->
          Droid.toResponse(writer, value.droid)
        }
      }
      if(value.human == null) {
        writer.writeObject(RESPONSE_FIELDS[3], null)
      } else {
        writer.writeObject(RESPONSE_FIELDS[3]) { writer ->
          Human.toResponse(writer, value.human)
        }
      }
    }

    object Hero : ResponseAdapter<TestQuery.Data.QueryData.Hero> {
<<<<<<< HEAD
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          responseName = "__typename",
          fieldName = "__typename",
          arguments = emptyMap(),
          conditions = emptyList(),
        )
      )

=======
>>>>>>> e374eee24... forward subfields
      override fun fromResponse(reader: ResponseReader, __typename: String?):
          TestQuery.Data.QueryData.Hero {
        val typename = __typename ?: reader.readString(ResponseField.Typename)
        return when(typename) {
          "Droid" -> CharacterHero.fromResponse(reader, typename)
          "Human" -> CharacterHero.fromResponse(reader, typename)
          else -> OtherHero.fromResponse(reader, typename)
        }
      }

      override fun toResponse(writer: ResponseWriter, value: TestQuery.Data.QueryData.Hero) {
        when(value) {
          is TestQuery.Data.QueryData.Hero.CharacterHero -> CharacterHero.toResponse(writer, value)
          is TestQuery.Data.QueryData.Hero.OtherHero -> OtherHero.toResponse(writer, value)
        }
      }

      object CharacterHero : ResponseAdapter<TestQuery.Data.QueryData.Hero.CharacterHero> {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
            responseName = "__typename",
            fieldName = "__typename",
            arguments = emptyMap(),
            conditions = emptyList(),
            possibleFieldSets = emptyMap(),
          ),
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
            responseName = "name",
            fieldName = "name",
            arguments = emptyMap(),
            conditions = emptyList(),
            possibleFieldSets = emptyMap(),
          )
        )

        override fun fromResponse(reader: ResponseReader, __typename: String?):
            TestQuery.Data.QueryData.Hero.CharacterHero {
          return reader.run {
            var __typename: String? = __typename
            var name: String? = null
            while(true) {
              when (selectField(RESPONSE_FIELDS)) {
                0 -> __typename = readString(RESPONSE_FIELDS[0])
                1 -> name = readString(RESPONSE_FIELDS[1])
                else -> break
              }
            }
            TestQuery.Data.QueryData.Hero.CharacterHero(
              __typename = __typename!!,
              name = name!!
            )
          }
        }

        override fun toResponse(writer: ResponseWriter,
            value: TestQuery.Data.QueryData.Hero.CharacterHero) {
          writer.writeString(RESPONSE_FIELDS[0], value.__typename)
          writer.writeString(RESPONSE_FIELDS[1], value.name)
        }
      }

      object OtherHero : ResponseAdapter<TestQuery.Data.QueryData.Hero.OtherHero> {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
            responseName = "__typename",
            fieldName = "__typename",
            arguments = emptyMap(),
            conditions = emptyList(),
            possibleFieldSets = emptyMap(),
          )
        )

        override fun fromResponse(reader: ResponseReader, __typename: String?):
            TestQuery.Data.QueryData.Hero.OtherHero {
          return reader.run {
            var __typename: String? = __typename
            while(true) {
              when (selectField(RESPONSE_FIELDS)) {
                0 -> __typename = readString(RESPONSE_FIELDS[0])
                else -> break
              }
            }
            TestQuery.Data.QueryData.Hero.OtherHero(
              __typename = __typename!!
            )
          }
        }

        override fun toResponse(writer: ResponseWriter,
            value: TestQuery.Data.QueryData.Hero.OtherHero) {
          writer.writeString(RESPONSE_FIELDS[0], value.__typename)
        }
      }
    }

    object Droid : ResponseAdapter<TestQuery.Data.QueryData.Droid> {
<<<<<<< HEAD
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          responseName = "__typename",
          fieldName = "__typename",
          arguments = emptyMap(),
          conditions = emptyList(),
        )
      )

=======
>>>>>>> e374eee24... forward subfields
      override fun fromResponse(reader: ResponseReader, __typename: String?):
          TestQuery.Data.QueryData.Droid {
        val typename = __typename ?: reader.readString(ResponseField.Typename)
        return when(typename) {
          "Droid" -> DroidDroid.fromResponse(reader, typename)
          else -> OtherDroid.fromResponse(reader, typename)
        }
      }

      override fun toResponse(writer: ResponseWriter, value: TestQuery.Data.QueryData.Droid) {
        when(value) {
          is TestQuery.Data.QueryData.Droid.DroidDroid -> DroidDroid.toResponse(writer, value)
          is TestQuery.Data.QueryData.Droid.OtherDroid -> OtherDroid.toResponse(writer, value)
        }
      }

      object DroidDroid : ResponseAdapter<TestQuery.Data.QueryData.Droid.DroidDroid> {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
            responseName = "__typename",
            fieldName = "__typename",
            arguments = emptyMap(),
            conditions = emptyList(),
            possibleFieldSets = emptyMap(),
          ),
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
            responseName = "name",
            fieldName = "name",
            arguments = emptyMap(),
            conditions = emptyList(),
            possibleFieldSets = emptyMap(),
          ),
          ResponseField(
            type = ResponseField.Type.Named.Other("String"),
            responseName = "primaryFunction",
            fieldName = "primaryFunction",
            arguments = emptyMap(),
            conditions = emptyList(),
            possibleFieldSets = emptyMap(),
          )
        )

        override fun fromResponse(reader: ResponseReader, __typename: String?):
            TestQuery.Data.QueryData.Droid.DroidDroid {
          return reader.run {
            var __typename: String? = __typename
            var name: String? = null
            var primaryFunction: String? = null
            while(true) {
              when (selectField(RESPONSE_FIELDS)) {
                0 -> __typename = readString(RESPONSE_FIELDS[0])
                1 -> name = readString(RESPONSE_FIELDS[1])
                2 -> primaryFunction = readString(RESPONSE_FIELDS[2])
                else -> break
              }
            }
            TestQuery.Data.QueryData.Droid.DroidDroid(
              __typename = __typename!!,
              name = name!!,
              primaryFunction = primaryFunction
            )
          }
        }

        override fun toResponse(writer: ResponseWriter,
            value: TestQuery.Data.QueryData.Droid.DroidDroid) {
          writer.writeString(RESPONSE_FIELDS[0], value.__typename)
          writer.writeString(RESPONSE_FIELDS[1], value.name)
          writer.writeString(RESPONSE_FIELDS[2], value.primaryFunction)
        }
      }

      object OtherDroid : ResponseAdapter<TestQuery.Data.QueryData.Droid.OtherDroid> {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
            responseName = "__typename",
            fieldName = "__typename",
            arguments = emptyMap(),
            conditions = emptyList(),
            possibleFieldSets = emptyMap(),
          )
        )

        override fun fromResponse(reader: ResponseReader, __typename: String?):
            TestQuery.Data.QueryData.Droid.OtherDroid {
          return reader.run {
            var __typename: String? = __typename
            while(true) {
              when (selectField(RESPONSE_FIELDS)) {
                0 -> __typename = readString(RESPONSE_FIELDS[0])
                else -> break
              }
            }
            TestQuery.Data.QueryData.Droid.OtherDroid(
              __typename = __typename!!
            )
          }
        }

        override fun toResponse(writer: ResponseWriter,
            value: TestQuery.Data.QueryData.Droid.OtherDroid) {
          writer.writeString(RESPONSE_FIELDS[0], value.__typename)
        }
      }
    }

    object Human : ResponseAdapter<TestQuery.Data.QueryData.Human> {
<<<<<<< HEAD
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          responseName = "__typename",
          fieldName = "__typename",
          arguments = emptyMap(),
          conditions = emptyList(),
        )
      )

=======
>>>>>>> e374eee24... forward subfields
      override fun fromResponse(reader: ResponseReader, __typename: String?):
          TestQuery.Data.QueryData.Human {
        val typename = __typename ?: reader.readString(ResponseField.Typename)
        return when(typename) {
          "Human" -> HumanHuman.fromResponse(reader, typename)
          else -> OtherHuman.fromResponse(reader, typename)
        }
      }

      override fun toResponse(writer: ResponseWriter, value: TestQuery.Data.QueryData.Human) {
        when(value) {
          is TestQuery.Data.QueryData.Human.HumanHuman -> HumanHuman.toResponse(writer, value)
          is TestQuery.Data.QueryData.Human.OtherHuman -> OtherHuman.toResponse(writer, value)
        }
      }

      object HumanHuman : ResponseAdapter<TestQuery.Data.QueryData.Human.HumanHuman> {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
            responseName = "__typename",
            fieldName = "__typename",
            arguments = emptyMap(),
            conditions = emptyList(),
            possibleFieldSets = emptyMap(),
          ),
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
            responseName = "name",
            fieldName = "name",
            arguments = emptyMap(),
            conditions = emptyList(),
            possibleFieldSets = emptyMap(),
          ),
          ResponseField(
            type = ResponseField.Type.Named.Other("String"),
            responseName = "homePlanet",
            fieldName = "homePlanet",
            arguments = emptyMap(),
            conditions = emptyList(),
            possibleFieldSets = emptyMap(),
          )
        )

        override fun fromResponse(reader: ResponseReader, __typename: String?):
            TestQuery.Data.QueryData.Human.HumanHuman {
          return reader.run {
            var __typename: String? = __typename
            var name: String? = null
            var homePlanet: String? = null
            while(true) {
              when (selectField(RESPONSE_FIELDS)) {
                0 -> __typename = readString(RESPONSE_FIELDS[0])
                1 -> name = readString(RESPONSE_FIELDS[1])
                2 -> homePlanet = readString(RESPONSE_FIELDS[2])
                else -> break
              }
            }
            TestQuery.Data.QueryData.Human.HumanHuman(
              __typename = __typename!!,
              name = name!!,
              homePlanet = homePlanet
            )
          }
        }

        override fun toResponse(writer: ResponseWriter,
            value: TestQuery.Data.QueryData.Human.HumanHuman) {
          writer.writeString(RESPONSE_FIELDS[0], value.__typename)
          writer.writeString(RESPONSE_FIELDS[1], value.name)
          writer.writeString(RESPONSE_FIELDS[2], value.homePlanet)
        }
      }

      object OtherHuman : ResponseAdapter<TestQuery.Data.QueryData.Human.OtherHuman> {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
            responseName = "__typename",
            fieldName = "__typename",
            arguments = emptyMap(),
            conditions = emptyList(),
            possibleFieldSets = emptyMap(),
          )
        )

        override fun fromResponse(reader: ResponseReader, __typename: String?):
            TestQuery.Data.QueryData.Human.OtherHuman {
          return reader.run {
            var __typename: String? = __typename
            while(true) {
              when (selectField(RESPONSE_FIELDS)) {
                0 -> __typename = readString(RESPONSE_FIELDS[0])
                else -> break
              }
            }
            TestQuery.Data.QueryData.Human.OtherHuman(
              __typename = __typename!!
            )
          }
        }

        override fun toResponse(writer: ResponseWriter,
            value: TestQuery.Data.QueryData.Human.OtherHuman) {
          writer.writeString(RESPONSE_FIELDS[0], value.__typename)
        }
      }
    }
  }

  object OtherData : ResponseAdapter<TestQuery.Data.OtherData> {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
        responseName = "__typename",
        fieldName = "__typename",
        arguments = emptyMap(),
        conditions = emptyList(),
        possibleFieldSets = emptyMap(),
      )
    )

    override fun fromResponse(reader: ResponseReader, __typename: String?):
        TestQuery.Data.OtherData {
      return reader.run {
        var __typename: String? = __typename
        while(true) {
          when (selectField(RESPONSE_FIELDS)) {
            0 -> __typename = readString(RESPONSE_FIELDS[0])
            else -> break
          }
        }
        TestQuery.Data.OtherData(
          __typename = __typename!!
        )
      }
    }

    override fun toResponse(writer: ResponseWriter, value: TestQuery.Data.OtherData) {
      writer.writeString(RESPONSE_FIELDS[0], value.__typename)
    }
  }
}
