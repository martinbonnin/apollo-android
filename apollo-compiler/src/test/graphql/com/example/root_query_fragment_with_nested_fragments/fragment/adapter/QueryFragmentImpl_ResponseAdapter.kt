// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.root_query_fragment_with_nested_fragments.fragment.adapter

import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.api.internal.ResponseAdapter
import com.apollographql.apollo.api.internal.ResponseReader
import com.apollographql.apollo.api.internal.ResponseWriter
import com.example.root_query_fragment_with_nested_fragments.fragment.QueryFragmentImpl
import kotlin.Array
import kotlin.String
import kotlin.Suppress

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
object QueryFragmentImpl_ResponseAdapter : ResponseAdapter<QueryFragmentImpl.Data> {
  val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
    ResponseField(
      type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
      responseName = "__typename",
      fieldName = "__typename",
      arguments = emptyMap(),
      conditions = emptyList(),
      possibleFieldSets = emptyMap(),
    ),
    ResponseField(
      type = ResponseField.Type.Named.Object("Character"),
      responseName = "hero",
      fieldName = "hero",
      arguments = emptyMap(),
      conditions = emptyList(),
      possibleFieldSets = mapOf(
        "Droid" to Hero.CharacterHero.RESPONSE_FIELDS,
        "Human" to Hero.CharacterHero.RESPONSE_FIELDS,
        "" to Hero.OtherHero.RESPONSE_FIELDS,
      ),
    ),
    ResponseField(
      type = ResponseField.Type.Named.Object("Droid"),
      responseName = "droid",
      fieldName = "droid",
      arguments = mapOf<String, Any?>(
        "id" to 1),
      conditions = emptyList(),
      possibleFieldSets = mapOf(
        "Droid" to Droid.DroidDroid.RESPONSE_FIELDS,
        "" to Droid.OtherDroid.RESPONSE_FIELDS,
      ),
    ),
    ResponseField(
      type = ResponseField.Type.Named.Object("Human"),
      responseName = "human",
      fieldName = "human",
      arguments = mapOf<String, Any?>(
        "id" to 1),
      conditions = emptyList(),
      possibleFieldSets = mapOf(
        "Human" to Human.HumanHuman.RESPONSE_FIELDS,
        "" to Human.OtherHuman.RESPONSE_FIELDS,
      ),
    )
  )

  override fun fromResponse(reader: ResponseReader, __typename: String?): QueryFragmentImpl.Data {
    return reader.run {
      var __typename: String? = __typename
      var hero: QueryFragmentImpl.Data.Hero? = null
      var droid: QueryFragmentImpl.Data.Droid? = null
      var human: QueryFragmentImpl.Data.Human? = null
      while(true) {
        when (selectField(RESPONSE_FIELDS)) {
          0 -> __typename = readString(RESPONSE_FIELDS[0])
          1 -> hero = readObject<QueryFragmentImpl.Data.Hero>(RESPONSE_FIELDS[1]) { reader ->
            Hero.fromResponse(reader)
          }
          2 -> droid = readObject<QueryFragmentImpl.Data.Droid>(RESPONSE_FIELDS[2]) { reader ->
            Droid.fromResponse(reader)
          }
          3 -> human = readObject<QueryFragmentImpl.Data.Human>(RESPONSE_FIELDS[3]) { reader ->
            Human.fromResponse(reader)
          }
          else -> break
        }
      }
      QueryFragmentImpl.Data(
        __typename = __typename!!,
        hero = hero,
        droid = droid,
        human = human
      )
    }
  }

  override fun toResponse(writer: ResponseWriter, value: QueryFragmentImpl.Data) {
    writer.writeString(RESPONSE_FIELDS[0], value.__typename)
    if(value.hero == null) {
      writer.writeObject(RESPONSE_FIELDS[1], null)
    } else {
      writer.writeObject(RESPONSE_FIELDS[1]) { writer ->
        Hero.toResponse(writer, value.hero)
      }
    }
    if(value.droid == null) {
      writer.writeObject(RESPONSE_FIELDS[2], null)
    } else {
      writer.writeObject(RESPONSE_FIELDS[2]) { writer ->
        Droid.toResponse(writer, value.droid)
      }
    }
    if(value.human == null) {
      writer.writeObject(RESPONSE_FIELDS[3], null)
    } else {
      writer.writeObject(RESPONSE_FIELDS[3]) { writer ->
        Human.toResponse(writer, value.human)
      }
    }
  }

  object Hero : ResponseAdapter<QueryFragmentImpl.Data.Hero> {
<<<<<<< HEAD
    private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
        responseName = "__typename",
        fieldName = "__typename",
        arguments = emptyMap(),
        conditions = emptyList(),
      )
    )

=======
>>>>>>> e374eee24... forward subfields
    override fun fromResponse(reader: ResponseReader, __typename: String?):
        QueryFragmentImpl.Data.Hero {
      val typename = __typename ?: reader.readString(ResponseField.Typename)
      return when(typename) {
        "Droid" -> CharacterHero.fromResponse(reader, typename)
        "Human" -> CharacterHero.fromResponse(reader, typename)
        else -> OtherHero.fromResponse(reader, typename)
      }
    }

    override fun toResponse(writer: ResponseWriter, value: QueryFragmentImpl.Data.Hero) {
      when(value) {
        is QueryFragmentImpl.Data.Hero.CharacterHero -> CharacterHero.toResponse(writer, value)
        is QueryFragmentImpl.Data.Hero.OtherHero -> OtherHero.toResponse(writer, value)
      }
    }

    object CharacterHero : ResponseAdapter<QueryFragmentImpl.Data.Hero.CharacterHero> {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          responseName = "__typename",
          fieldName = "__typename",
          arguments = emptyMap(),
          conditions = emptyList(),
          possibleFieldSets = emptyMap(),
        ),
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          responseName = "name",
          fieldName = "name",
          arguments = emptyMap(),
          conditions = emptyList(),
          possibleFieldSets = emptyMap(),
        )
      )

      override fun fromResponse(reader: ResponseReader, __typename: String?):
          QueryFragmentImpl.Data.Hero.CharacterHero {
        return reader.run {
          var __typename: String? = __typename
          var name: String? = null
          while(true) {
            when (selectField(RESPONSE_FIELDS)) {
              0 -> __typename = readString(RESPONSE_FIELDS[0])
              1 -> name = readString(RESPONSE_FIELDS[1])
              else -> break
            }
          }
          QueryFragmentImpl.Data.Hero.CharacterHero(
            __typename = __typename!!,
            name = name!!
          )
        }
      }

      override fun toResponse(writer: ResponseWriter,
          value: QueryFragmentImpl.Data.Hero.CharacterHero) {
        writer.writeString(RESPONSE_FIELDS[0], value.__typename)
        writer.writeString(RESPONSE_FIELDS[1], value.name)
      }
    }

    object OtherHero : ResponseAdapter<QueryFragmentImpl.Data.Hero.OtherHero> {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          responseName = "__typename",
          fieldName = "__typename",
          arguments = emptyMap(),
          conditions = emptyList(),
          possibleFieldSets = emptyMap(),
        )
      )

      override fun fromResponse(reader: ResponseReader, __typename: String?):
          QueryFragmentImpl.Data.Hero.OtherHero {
        return reader.run {
          var __typename: String? = __typename
          while(true) {
            when (selectField(RESPONSE_FIELDS)) {
              0 -> __typename = readString(RESPONSE_FIELDS[0])
              else -> break
            }
          }
          QueryFragmentImpl.Data.Hero.OtherHero(
            __typename = __typename!!
          )
        }
      }

      override fun toResponse(writer: ResponseWriter,
          value: QueryFragmentImpl.Data.Hero.OtherHero) {
        writer.writeString(RESPONSE_FIELDS[0], value.__typename)
      }
    }
  }

  object Droid : ResponseAdapter<QueryFragmentImpl.Data.Droid> {
<<<<<<< HEAD
    private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
        responseName = "__typename",
        fieldName = "__typename",
        arguments = emptyMap(),
        conditions = emptyList(),
      )
    )

=======
>>>>>>> e374eee24... forward subfields
    override fun fromResponse(reader: ResponseReader, __typename: String?):
        QueryFragmentImpl.Data.Droid {
      val typename = __typename ?: reader.readString(ResponseField.Typename)
      return when(typename) {
        "Droid" -> DroidDroid.fromResponse(reader, typename)
        else -> OtherDroid.fromResponse(reader, typename)
      }
    }

    override fun toResponse(writer: ResponseWriter, value: QueryFragmentImpl.Data.Droid) {
      when(value) {
        is QueryFragmentImpl.Data.Droid.DroidDroid -> DroidDroid.toResponse(writer, value)
        is QueryFragmentImpl.Data.Droid.OtherDroid -> OtherDroid.toResponse(writer, value)
      }
    }

    object DroidDroid : ResponseAdapter<QueryFragmentImpl.Data.Droid.DroidDroid> {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          responseName = "__typename",
          fieldName = "__typename",
          arguments = emptyMap(),
          conditions = emptyList(),
          possibleFieldSets = emptyMap(),
        ),
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          responseName = "name",
          fieldName = "name",
          arguments = emptyMap(),
          conditions = emptyList(),
          possibleFieldSets = emptyMap(),
        ),
        ResponseField(
          type = ResponseField.Type.Named.Other("String"),
          responseName = "primaryFunction",
          fieldName = "primaryFunction",
          arguments = emptyMap(),
          conditions = emptyList(),
          possibleFieldSets = emptyMap(),
        )
      )

      override fun fromResponse(reader: ResponseReader, __typename: String?):
          QueryFragmentImpl.Data.Droid.DroidDroid {
        return reader.run {
          var __typename: String? = __typename
          var name: String? = null
          var primaryFunction: String? = null
          while(true) {
            when (selectField(RESPONSE_FIELDS)) {
              0 -> __typename = readString(RESPONSE_FIELDS[0])
              1 -> name = readString(RESPONSE_FIELDS[1])
              2 -> primaryFunction = readString(RESPONSE_FIELDS[2])
              else -> break
            }
          }
          QueryFragmentImpl.Data.Droid.DroidDroid(
            __typename = __typename!!,
            name = name!!,
            primaryFunction = primaryFunction
          )
        }
      }

      override fun toResponse(writer: ResponseWriter,
          value: QueryFragmentImpl.Data.Droid.DroidDroid) {
        writer.writeString(RESPONSE_FIELDS[0], value.__typename)
        writer.writeString(RESPONSE_FIELDS[1], value.name)
        writer.writeString(RESPONSE_FIELDS[2], value.primaryFunction)
      }
    }

    object OtherDroid : ResponseAdapter<QueryFragmentImpl.Data.Droid.OtherDroid> {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          responseName = "__typename",
          fieldName = "__typename",
          arguments = emptyMap(),
          conditions = emptyList(),
          possibleFieldSets = emptyMap(),
        )
      )

      override fun fromResponse(reader: ResponseReader, __typename: String?):
          QueryFragmentImpl.Data.Droid.OtherDroid {
        return reader.run {
          var __typename: String? = __typename
          while(true) {
            when (selectField(RESPONSE_FIELDS)) {
              0 -> __typename = readString(RESPONSE_FIELDS[0])
              else -> break
            }
          }
          QueryFragmentImpl.Data.Droid.OtherDroid(
            __typename = __typename!!
          )
        }
      }

      override fun toResponse(writer: ResponseWriter,
          value: QueryFragmentImpl.Data.Droid.OtherDroid) {
        writer.writeString(RESPONSE_FIELDS[0], value.__typename)
      }
    }
  }

  object Human : ResponseAdapter<QueryFragmentImpl.Data.Human> {
<<<<<<< HEAD
    private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
        responseName = "__typename",
        fieldName = "__typename",
        arguments = emptyMap(),
        conditions = emptyList(),
      )
    )

=======
>>>>>>> e374eee24... forward subfields
    override fun fromResponse(reader: ResponseReader, __typename: String?):
        QueryFragmentImpl.Data.Human {
      val typename = __typename ?: reader.readString(ResponseField.Typename)
      return when(typename) {
        "Human" -> HumanHuman.fromResponse(reader, typename)
        else -> OtherHuman.fromResponse(reader, typename)
      }
    }

    override fun toResponse(writer: ResponseWriter, value: QueryFragmentImpl.Data.Human) {
      when(value) {
        is QueryFragmentImpl.Data.Human.HumanHuman -> HumanHuman.toResponse(writer, value)
        is QueryFragmentImpl.Data.Human.OtherHuman -> OtherHuman.toResponse(writer, value)
      }
    }

    object HumanHuman : ResponseAdapter<QueryFragmentImpl.Data.Human.HumanHuman> {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          responseName = "__typename",
          fieldName = "__typename",
          arguments = emptyMap(),
          conditions = emptyList(),
          possibleFieldSets = emptyMap(),
        ),
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          responseName = "name",
          fieldName = "name",
          arguments = emptyMap(),
          conditions = emptyList(),
          possibleFieldSets = emptyMap(),
        ),
        ResponseField(
          type = ResponseField.Type.Named.Other("String"),
          responseName = "homePlanet",
          fieldName = "homePlanet",
          arguments = emptyMap(),
          conditions = emptyList(),
          possibleFieldSets = emptyMap(),
        )
      )

      override fun fromResponse(reader: ResponseReader, __typename: String?):
          QueryFragmentImpl.Data.Human.HumanHuman {
        return reader.run {
          var __typename: String? = __typename
          var name: String? = null
          var homePlanet: String? = null
          while(true) {
            when (selectField(RESPONSE_FIELDS)) {
              0 -> __typename = readString(RESPONSE_FIELDS[0])
              1 -> name = readString(RESPONSE_FIELDS[1])
              2 -> homePlanet = readString(RESPONSE_FIELDS[2])
              else -> break
            }
          }
          QueryFragmentImpl.Data.Human.HumanHuman(
            __typename = __typename!!,
            name = name!!,
            homePlanet = homePlanet
          )
        }
      }

      override fun toResponse(writer: ResponseWriter,
          value: QueryFragmentImpl.Data.Human.HumanHuman) {
        writer.writeString(RESPONSE_FIELDS[0], value.__typename)
        writer.writeString(RESPONSE_FIELDS[1], value.name)
        writer.writeString(RESPONSE_FIELDS[2], value.homePlanet)
      }
    }

    object OtherHuman : ResponseAdapter<QueryFragmentImpl.Data.Human.OtherHuman> {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          responseName = "__typename",
          fieldName = "__typename",
          arguments = emptyMap(),
          conditions = emptyList(),
          possibleFieldSets = emptyMap(),
        )
      )

      override fun fromResponse(reader: ResponseReader, __typename: String?):
          QueryFragmentImpl.Data.Human.OtherHuman {
        return reader.run {
          var __typename: String? = __typename
          while(true) {
            when (selectField(RESPONSE_FIELDS)) {
              0 -> __typename = readString(RESPONSE_FIELDS[0])
              else -> break
            }
          }
          QueryFragmentImpl.Data.Human.OtherHuman(
            __typename = __typename!!
          )
        }
      }

      override fun toResponse(writer: ResponseWriter,
          value: QueryFragmentImpl.Data.Human.OtherHuman) {
        writer.writeString(RESPONSE_FIELDS[0], value.__typename)
      }
    }
  }
}
