// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.root_query_fragment_with_nested_fragments.fragment.adapter

import com.apollographql.apollo3.api.NullableStringResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.internal.json.MapJsonReader
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.root_query_fragment_with_nested_fragments.fragment.DroidFragment
import com.example.root_query_fragment_with_nested_fragments.fragment.HeroFragment
import com.example.root_query_fragment_with_nested_fragments.fragment.QueryFragment
import kotlin.Array
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
object QueryFragment_ResponseAdapter : ResponseAdapter<QueryFragment.Data> {
  val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
    ResponseField.Typename,
    ResponseField(
      type = ResponseField.Type.Named.Object("Character"),
      fieldName = "hero",
      fieldSets = listOf(
        ResponseField.FieldSet("Droid", HeroFragment_ResponseAdapter.RESPONSE_FIELDS),
        ResponseField.FieldSet("Human", HeroFragment_ResponseAdapter.RESPONSE_FIELDS),
      ),
    ),
    ResponseField(
      type = ResponseField.Type.Named.Object("Droid"),
      fieldName = "droid",
      arguments = mapOf<String, Any?>(
        "id" to 1),
      fieldSets = listOf(
        ResponseField.FieldSet("Droid", DroidFragment_ResponseAdapter.RESPONSE_FIELDS),
      ),
    ),
    ResponseField(
      type = ResponseField.Type.Named.Object("Human"),
      fieldName = "human",
      arguments = mapOf<String, Any?>(
        "id" to 1),
      fieldSets = listOf(
        ResponseField.FieldSet("Human", Human.AsHuman.RESPONSE_FIELDS),
      ),
    )
  )

  val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

  override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
      QueryFragment.Data {
    var __typename: String? = null
    var hero: QueryFragment.Data.Hero? = null
    var droid: QueryFragment.Data.Droid? = null
    var human: QueryFragment.Data.Human? = null
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
        1 -> hero = Hero.obj(true).nullable().fromResponse(reader, responseAdapterCache)
        2 -> droid = Droid.obj(true).nullable().fromResponse(reader, responseAdapterCache)
        3 -> human = Human.obj(true).nullable().fromResponse(reader, responseAdapterCache)
        else -> break
      }
    }
    return QueryFragment.Data(
      __typename = __typename!!,
      hero = hero,
      droid = droid,
      human = human
    )
  }

  override fun toResponse(
    writer: JsonWriter,
    responseAdapterCache: ResponseAdapterCache,
    value: QueryFragment.Data
  ) {
    writer.name("__typename")
    StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
    writer.name("hero")
    Hero.obj(true).nullable().toResponse(writer, responseAdapterCache, value.hero)
    writer.name("droid")
    Droid.obj(true).nullable().toResponse(writer, responseAdapterCache, value.droid)
    writer.name("human")
    Human.obj(true).nullable().toResponse(writer, responseAdapterCache, value.human)
  }

  object Hero : ResponseAdapter<QueryFragment.Data.Hero> {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.Typename
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        QueryFragment.Data.Hero {
      var __typename: String? = null

      var heroFragment: HeroFragment.Data? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      if (__typename in arrayOf("Droid", "Human")) {
        (reader as MapJsonReader).rewind()
        heroFragment = HeroFragment_ResponseAdapter.fromResponse(reader, responseAdapterCache)
      }

      return QueryFragment.Data.Hero(
        __typename = __typename!!,
        heroFragment = heroFragment
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: QueryFragment.Data.Hero
    ) {
      writer.name("__typename")
      StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
      if (value.heroFragment != null)
          HeroFragment_ResponseAdapter.toResponse(writer, responseAdapterCache, value.heroFragment)
    }
  }

  object Droid : ResponseAdapter<QueryFragment.Data.Droid> {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.Typename
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        QueryFragment.Data.Droid {
      var __typename: String? = null

      var droidFragment: DroidFragment.Data? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      if (__typename in arrayOf("Droid")) {
        (reader as MapJsonReader).rewind()
        droidFragment = DroidFragment_ResponseAdapter.fromResponse(reader, responseAdapterCache)
      }

      return QueryFragment.Data.Droid(
        __typename = __typename!!,
        droidFragment = droidFragment
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: QueryFragment.Data.Droid
    ) {
      writer.name("__typename")
      StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
      if (value.droidFragment != null)
          DroidFragment_ResponseAdapter.toResponse(writer, responseAdapterCache, value.droidFragment)
    }
  }

  object Human : ResponseAdapter<QueryFragment.Data.Human> {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.Typename
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        QueryFragment.Data.Human {
      var __typename: String? = null

      var asAsHuman: QueryFragment.Data.Human.AsHuman? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      if (__typename in arrayOf("Human")) {
        (reader as MapJsonReader).rewind()
        asAsHuman = AsHuman.fromResponse(reader, responseAdapterCache)
      }

      return QueryFragment.Data.Human(
        __typename = __typename!!,
        asAsHuman = asAsHuman
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: QueryFragment.Data.Human
    ) {
      writer.name("__typename")
      StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
      if (value.asAsHuman != null) AsHuman.toResponse(writer, responseAdapterCache, value.asAsHuman)
    }

    object AsHuman : ResponseAdapter<QueryFragment.Data.Human.AsHuman> {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename,
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          fieldName = "name",
        ),
        ResponseField(
          type = ResponseField.Type.Named.Other("String"),
          fieldName = "homePlanet",
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          QueryFragment.Data.Human.AsHuman {
        var __typename: String? = null
        var name: String? = null
        var homePlanet: String? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            2 -> homePlanet = NullableStringResponseAdapter.fromResponse(reader,
                responseAdapterCache)
            else -> break
          }
        }
        return QueryFragment.Data.Human.AsHuman(
          __typename = __typename!!,
          name = name!!,
          homePlanet = homePlanet
        )
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: QueryFragment.Data.Human.AsHuman
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("name")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        writer.name("homePlanet")
        NullableStringResponseAdapter.toResponse(writer, responseAdapterCache, value.homePlanet)
      }
    }
  }
}
