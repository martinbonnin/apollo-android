// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.root_query_fragment_with_nested_fragments.adapter

import com.apollographql.apollo3.api.NullableStringResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.root_query_fragment_with_nested_fragments.TestQuery
import kotlin.Array
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
object TestQuery_ResponseAdapter : ResponseAdapter<TestQuery.Data> {
  override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
      TestQuery.Data {
    check(reader.nextName() == "__typename")
    val typename = reader.nextString()!!
    return when(typename) {
      "Query" -> QueryData.fromResponse(reader, responseAdapterCache, typename)
      else -> OtherData.fromResponse(reader, responseAdapterCache, typename)
    }
  }

  override fun toResponse(
    writer: JsonWriter,
    responseAdapterCache: ResponseAdapterCache,
    value: TestQuery.Data
  ) {
    when(value) {
      is TestQuery.Data.QueryData -> QueryData.toResponse(writer, responseAdapterCache, value)
      is TestQuery.Data.OtherData -> OtherData.toResponse(writer, responseAdapterCache, value)
    }
  }

  object QueryData {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.Typename,
      ResponseField(
        type = ResponseField.Type.Named.Object("Character"),
        fieldName = "hero",
        fieldSets = listOf(
          ResponseField.FieldSet("Droid", Hero.CharacterHero.RESPONSE_FIELDS),
          ResponseField.FieldSet("Human", Hero.CharacterHero.RESPONSE_FIELDS),
          ResponseField.FieldSet(null, Hero.OtherHero.RESPONSE_FIELDS),
        ),
      ),
      ResponseField(
        type = ResponseField.Type.Named.Object("Droid"),
        fieldName = "droid",
        arguments = mapOf<String, Any?>(
          "id" to 1),
        fieldSets = listOf(
          ResponseField.FieldSet("Droid", Droid.DroidDroid.RESPONSE_FIELDS),
          ResponseField.FieldSet(null, Droid.OtherDroid.RESPONSE_FIELDS),
        ),
      ),
      ResponseField(
        type = ResponseField.Type.Named.Object("Human"),
        fieldName = "human",
        arguments = mapOf<String, Any?>(
          "id" to 1),
        fieldSets = listOf(
          ResponseField.FieldSet("Human", Human.HumanHuman.RESPONSE_FIELDS),
          ResponseField.FieldSet(null, Human.OtherHuman.RESPONSE_FIELDS),
        ),
      )
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

    fun fromResponse(
      reader: JsonReader,
      responseAdapterCache: ResponseAdapterCache,
      __typename: String?
    ): TestQuery.Data.QueryData {
      var __typename: String? = __typename
      var hero: TestQuery.Data.QueryData.Hero? = null
      var droid: TestQuery.Data.QueryData.Droid? = null
      var human: TestQuery.Data.QueryData.Human? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
          1 -> hero = Hero.obj().nullable().fromResponse(reader, responseAdapterCache)
          2 -> droid = Droid.obj().nullable().fromResponse(reader, responseAdapterCache)
          3 -> human = Human.obj().nullable().fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      return TestQuery.Data.QueryData(
        __typename = __typename!!,
        hero = hero,
        droid = droid,
        human = human
      )
    }

    fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: TestQuery.Data.QueryData
    ) {
      writer.name("__typename")
      StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
      writer.name("hero")
      Hero.obj().nullable().toResponse(writer, responseAdapterCache, value.hero)
      writer.name("droid")
      Droid.obj().nullable().toResponse(writer, responseAdapterCache, value.droid)
      writer.name("human")
      Human.obj().nullable().toResponse(writer, responseAdapterCache, value.human)
    }

    object Hero : ResponseAdapter<TestQuery.Data.QueryData.Hero> {
      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestQuery.Data.QueryData.Hero {
        check(reader.nextName() == "__typename")
        val typename = reader.nextString()!!
        return when(typename) {
          "Droid" -> CharacterHero.fromResponse(reader, responseAdapterCache, typename)
          "Human" -> CharacterHero.fromResponse(reader, responseAdapterCache, typename)
          else -> OtherHero.fromResponse(reader, responseAdapterCache, typename)
        }
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.QueryData.Hero
      ) {
        when(value) {
          is TestQuery.Data.QueryData.Hero.CharacterHero -> CharacterHero.toResponse(writer, responseAdapterCache, value)
          is TestQuery.Data.QueryData.Hero.OtherHero -> OtherHero.toResponse(writer, responseAdapterCache, value)
        }
      }

      object CharacterHero {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.Typename,
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
            fieldName = "name",
          )
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

        fun fromResponse(
          reader: JsonReader,
          responseAdapterCache: ResponseAdapterCache,
          __typename: String?
        ): TestQuery.Data.QueryData.Hero.CharacterHero {
          var __typename: String? = __typename
          var name: String? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              else -> break
            }
          }
          return TestQuery.Data.QueryData.Hero.CharacterHero(
            __typename = __typename!!,
            name = name!!
          )
        }

        fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.QueryData.Hero.CharacterHero
        ) {
          writer.name("__typename")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
          writer.name("name")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        }
      }

      object OtherHero {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.Typename
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

        fun fromResponse(
          reader: JsonReader,
          responseAdapterCache: ResponseAdapterCache,
          __typename: String?
        ): TestQuery.Data.QueryData.Hero.OtherHero {
          var __typename: String? = __typename
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              else -> break
            }
          }
          return TestQuery.Data.QueryData.Hero.OtherHero(
            __typename = __typename!!
          )
        }

        fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.QueryData.Hero.OtherHero
        ) {
          writer.name("__typename")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        }
      }
    }

    object Droid : ResponseAdapter<TestQuery.Data.QueryData.Droid> {
      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestQuery.Data.QueryData.Droid {
        check(reader.nextName() == "__typename")
        val typename = reader.nextString()!!
        return when(typename) {
          "Droid" -> DroidDroid.fromResponse(reader, responseAdapterCache, typename)
          else -> OtherDroid.fromResponse(reader, responseAdapterCache, typename)
        }
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.QueryData.Droid
      ) {
        when(value) {
          is TestQuery.Data.QueryData.Droid.DroidDroid -> DroidDroid.toResponse(writer, responseAdapterCache, value)
          is TestQuery.Data.QueryData.Droid.OtherDroid -> OtherDroid.toResponse(writer, responseAdapterCache, value)
        }
      }

      object DroidDroid {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.Typename,
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
            fieldName = "name",
          ),
          ResponseField(
            type = ResponseField.Type.Named.Other("String"),
            fieldName = "primaryFunction",
          )
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

        fun fromResponse(
          reader: JsonReader,
          responseAdapterCache: ResponseAdapterCache,
          __typename: String?
        ): TestQuery.Data.QueryData.Droid.DroidDroid {
          var __typename: String? = __typename
          var name: String? = null
          var primaryFunction: String? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              2 -> primaryFunction = NullableStringResponseAdapter.fromResponse(reader,
                  responseAdapterCache)
              else -> break
            }
          }
          return TestQuery.Data.QueryData.Droid.DroidDroid(
            __typename = __typename!!,
            name = name!!,
            primaryFunction = primaryFunction
          )
        }

        fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.QueryData.Droid.DroidDroid
        ) {
          writer.name("__typename")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
          writer.name("name")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
          writer.name("primaryFunction")
          NullableStringResponseAdapter.toResponse(writer, responseAdapterCache,
              value.primaryFunction)
        }
      }

      object OtherDroid {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.Typename
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

        fun fromResponse(
          reader: JsonReader,
          responseAdapterCache: ResponseAdapterCache,
          __typename: String?
        ): TestQuery.Data.QueryData.Droid.OtherDroid {
          var __typename: String? = __typename
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              else -> break
            }
          }
          return TestQuery.Data.QueryData.Droid.OtherDroid(
            __typename = __typename!!
          )
        }

        fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.QueryData.Droid.OtherDroid
        ) {
          writer.name("__typename")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        }
      }
    }

    object Human : ResponseAdapter<TestQuery.Data.QueryData.Human> {
      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          TestQuery.Data.QueryData.Human {
        check(reader.nextName() == "__typename")
        val typename = reader.nextString()!!
        return when(typename) {
          "Human" -> HumanHuman.fromResponse(reader, responseAdapterCache, typename)
          else -> OtherHuman.fromResponse(reader, responseAdapterCache, typename)
        }
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.QueryData.Human
      ) {
        when(value) {
          is TestQuery.Data.QueryData.Human.HumanHuman -> HumanHuman.toResponse(writer, responseAdapterCache, value)
          is TestQuery.Data.QueryData.Human.OtherHuman -> OtherHuman.toResponse(writer, responseAdapterCache, value)
        }
      }

      object HumanHuman {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.Typename,
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
            fieldName = "name",
          ),
          ResponseField(
            type = ResponseField.Type.Named.Other("String"),
            fieldName = "homePlanet",
          )
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

        fun fromResponse(
          reader: JsonReader,
          responseAdapterCache: ResponseAdapterCache,
          __typename: String?
        ): TestQuery.Data.QueryData.Human.HumanHuman {
          var __typename: String? = __typename
          var name: String? = null
          var homePlanet: String? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              2 -> homePlanet = NullableStringResponseAdapter.fromResponse(reader,
                  responseAdapterCache)
              else -> break
            }
          }
          return TestQuery.Data.QueryData.Human.HumanHuman(
            __typename = __typename!!,
            name = name!!,
            homePlanet = homePlanet
          )
        }

        fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.QueryData.Human.HumanHuman
        ) {
          writer.name("__typename")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
          writer.name("name")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
          writer.name("homePlanet")
          NullableStringResponseAdapter.toResponse(writer, responseAdapterCache, value.homePlanet)
        }
      }

      object OtherHuman {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.Typename
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

        fun fromResponse(
          reader: JsonReader,
          responseAdapterCache: ResponseAdapterCache,
          __typename: String?
        ): TestQuery.Data.QueryData.Human.OtherHuman {
          var __typename: String? = __typename
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              else -> break
            }
          }
          return TestQuery.Data.QueryData.Human.OtherHuman(
            __typename = __typename!!
          )
        }

        fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.QueryData.Human.OtherHuman
        ) {
          writer.name("__typename")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        }
      }
    }
  }

  object OtherData {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.Typename
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

    fun fromResponse(
      reader: JsonReader,
      responseAdapterCache: ResponseAdapterCache,
      __typename: String?
    ): TestQuery.Data.OtherData {
      var __typename: String? = __typename
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      return TestQuery.Data.OtherData(
        __typename = __typename!!
      )
    }

    fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: TestQuery.Data.OtherData
    ) {
      writer.name("__typename")
      StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
    }
  }
}
