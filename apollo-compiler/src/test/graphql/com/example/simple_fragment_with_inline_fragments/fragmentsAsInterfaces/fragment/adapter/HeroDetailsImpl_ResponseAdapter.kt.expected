// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.simple_fragment_with_inline_fragments.fragment.adapter

import com.apollographql.apollo3.api.NullableDoubleResponseAdapter
import com.apollographql.apollo3.api.NullableStringResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.simple_fragment_with_inline_fragments.fragment.HeroDetailsImpl
import kotlin.Array
import kotlin.Double
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
object HeroDetailsImpl_ResponseAdapter : ResponseAdapter<HeroDetailsImpl.Data> {
  val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
    ResponseField.Typename,
    ResponseField(
      type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
      fieldName = "name",
    ),
    ResponseField(
      type = ResponseField.Type.List(ResponseField.Type.Named.Object("Character")),
      fieldName = "friends",
      fieldSets = listOf(
        ResponseField.FieldSet("Human", Friends.HumanFriends.RESPONSE_FIELDS),
        ResponseField.FieldSet("Droid", Friends.DroidFriends.RESPONSE_FIELDS),
        ResponseField.FieldSet(null, Friends.OtherFriends.RESPONSE_FIELDS),
      ),
    )
  )

  val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

  override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
      HeroDetailsImpl.Data {
    var __typename: String? = null
    var name: String? = null
    var friends: List<HeroDetailsImpl.Data.Friends?>? = null
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
        1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
        2 -> friends = Friends.obj().nullable().list().nullable().fromResponse(reader,
            responseAdapterCache)
        else -> break
      }
    }
    return HeroDetailsImpl.Data(
      __typename = __typename!!,
      name = name!!,
      friends = friends
    )
  }

  override fun toResponse(
    writer: JsonWriter,
    responseAdapterCache: ResponseAdapterCache,
    value: HeroDetailsImpl.Data
  ) {
    writer.beginObject()
    writer.name("__typename")
    StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
    writer.name("name")
    StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
    writer.name("friends")
    Friends.obj().nullable().list().nullable().toResponse(writer, responseAdapterCache,
        value.friends)
    writer.endObject()
  }

  object Friends : ResponseAdapter<HeroDetailsImpl.Data.Friends> {
    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        HeroDetailsImpl.Data.Friends {
      check(reader.nextName() == "__typename")
      val typename = reader.nextString()!!
      return when(typename) {
        "Human" -> HumanFriends.fromResponse(reader, responseAdapterCache, typename)
        "Droid" -> DroidFriends.fromResponse(reader, responseAdapterCache, typename)
        else -> OtherFriends.fromResponse(reader, responseAdapterCache, typename)
      }
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: HeroDetailsImpl.Data.Friends
    ) {
      when(value) {
        is HeroDetailsImpl.Data.Friends.HumanFriends -> HumanFriends.toResponse(writer, responseAdapterCache, value)
        is HeroDetailsImpl.Data.Friends.DroidFriends -> DroidFriends.toResponse(writer, responseAdapterCache, value)
        is HeroDetailsImpl.Data.Friends.OtherFriends -> OtherFriends.toResponse(writer, responseAdapterCache, value)
      }
    }

    object HumanFriends {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename,
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          fieldName = "name",
        ),
        ResponseField(
          type = ResponseField.Type.Named.Other("Float"),
          fieldName = "height",
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String?
      ): HeroDetailsImpl.Data.Friends.HumanFriends {
        var __typename: String? = __typename
        var name: String? = null
        var height: Double? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            2 -> height = NullableDoubleResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return HeroDetailsImpl.Data.Friends.HumanFriends(
          __typename = __typename!!,
          name = name!!,
          height = height
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: HeroDetailsImpl.Data.Friends.HumanFriends
      ) {
        writer.beginObject()
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("name")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        writer.name("height")
        NullableDoubleResponseAdapter.toResponse(writer, responseAdapterCache, value.height)
        writer.endObject()
      }
    }

    object DroidFriends {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename,
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          fieldName = "name",
        ),
        ResponseField(
          type = ResponseField.Type.Named.Other("String"),
          fieldName = "primaryFunction",
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String?
      ): HeroDetailsImpl.Data.Friends.DroidFriends {
        var __typename: String? = __typename
        var name: String? = null
        var primaryFunction: String? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            2 -> primaryFunction = NullableStringResponseAdapter.fromResponse(reader,
                responseAdapterCache)
            else -> break
          }
        }
        return HeroDetailsImpl.Data.Friends.DroidFriends(
          __typename = __typename!!,
          name = name!!,
          primaryFunction = primaryFunction
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: HeroDetailsImpl.Data.Friends.DroidFriends
      ) {
        writer.beginObject()
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("name")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        writer.name("primaryFunction")
        NullableStringResponseAdapter.toResponse(writer, responseAdapterCache,
            value.primaryFunction)
        writer.endObject()
      }
    }

    object OtherFriends {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename,
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          fieldName = "name",
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String?
      ): HeroDetailsImpl.Data.Friends.OtherFriends {
        var __typename: String? = __typename
        var name: String? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return HeroDetailsImpl.Data.Friends.OtherFriends(
          __typename = __typename!!,
          name = name!!
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: HeroDetailsImpl.Data.Friends.OtherFriends
      ) {
        writer.beginObject()
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("name")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        writer.endObject()
      }
    }
  }
}
