// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.starships.adapter

import com.apollographql.apollo3.api.DoubleResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.Variable
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.starships.TestQuery
import kotlin.Array
import kotlin.Double
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
object TestQuery_ResponseAdapter : ResponseAdapter<TestQuery.Data> {
  val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
    ResponseField(
      type = ResponseField.Type.Named.Object("Starship"),
      fieldName = "starship",
      arguments = mapOf<String, Any?>(
        "id" to Variable("id")),
      fieldSets = listOf(
        ResponseField.FieldSet(null, Starship.RESPONSE_FIELDS)
      ),
    )
  )

  val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

  override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
      TestQuery.Data {
    var starship: TestQuery.Data.Starship? = null
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> starship = Starship.obj().nullable().fromResponse(reader, responseAdapterCache)
        else -> break
      }
    }
    return TestQuery.Data(
      starship = starship
    )
  }

  override fun toResponse(
    writer: JsonWriter,
    responseAdapterCache: ResponseAdapterCache,
    value: TestQuery.Data
  ) {
    writer.beginObject()
    writer.name("starship")
    Starship.obj().nullable().toResponse(writer, responseAdapterCache, value.starship)
    writer.endObject()
  }

  object Starship : ResponseAdapter<TestQuery.Data.Starship> {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
        fieldName = "id",
      ),
      ResponseField(
        type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
        fieldName = "name",
      ),
      ResponseField(
        type =
            ResponseField.Type.List(ResponseField.Type.NotNull(ResponseField.Type.List(ResponseField.Type.NotNull(ResponseField.Type.Named.Other("Float"))))),
        fieldName = "coordinates",
      )
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        TestQuery.Data.Starship {
      var id: String? = null
      var name: String? = null
      var coordinates: List<List<Double>>? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> id = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
          1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
          2 -> coordinates = DoubleResponseAdapter.list().list().nullable().fromResponse(reader,
              responseAdapterCache)
          else -> break
        }
      }
      return TestQuery.Data.Starship(
        id = id!!,
        name = name!!,
        coordinates = coordinates
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: TestQuery.Data.Starship
    ) {
      writer.beginObject()
      writer.name("id")
      StringResponseAdapter.toResponse(writer, responseAdapterCache, value.id)
      writer.name("name")
      StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
      writer.name("coordinates")
      DoubleResponseAdapter.list().list().nullable().toResponse(writer, responseAdapterCache,
          value.coordinates)
      writer.endObject()
    }
  }
}
