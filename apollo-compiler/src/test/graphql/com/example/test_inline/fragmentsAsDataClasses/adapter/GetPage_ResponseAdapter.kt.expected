// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.test_inline.adapter

import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.internal.json.MapJsonReader
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.obj
import com.example.test_inline.GetPage
import kotlin.Array
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
object GetPage_ResponseAdapter : ResponseAdapter<GetPage.Data> {
  val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
    ResponseField(
      type = ResponseField.Type.NotNull(ResponseField.Type.Named.Object("Collection")),
      fieldName = "collection",
      fieldSets = listOf(
        ResponseField.FieldSet("ParticularCollection",
            Collection.AsParticularCollection.RESPONSE_FIELDS),
      ),
    )
  )

  val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

  override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
      GetPage.Data {
    var collection: GetPage.Data.Collection? = null
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> collection = Collection.obj(true).fromResponse(reader, responseAdapterCache)
        else -> break
      }
    }
    return GetPage.Data(
      collection = collection!!
    )
  }

  override fun toResponse(
    writer: JsonWriter,
    responseAdapterCache: ResponseAdapterCache,
    value: GetPage.Data
  ) {
    writer.name("collection")
    Collection.obj(true).toResponse(writer, responseAdapterCache, value.collection)
  }

  object Collection : ResponseAdapter<GetPage.Data.Collection> {
    val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
      ResponseField.Typename,
      ResponseField(
        type =
            ResponseField.Type.NotNull(ResponseField.Type.List(ResponseField.Type.NotNull(ResponseField.Type.Named.Object("Item")))),
        fieldName = "items",
        fieldSets = listOf(
          ResponseField.FieldSet(null, Items.RESPONSE_FIELDS)
        ),
      )
    )

    val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        GetPage.Data.Collection {
      var __typename: String? = null
      var items: List<GetPage.Data.Collection.Items>? = null

      var asAsParticularCollection: GetPage.Data.Collection.AsParticularCollection? = null
      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
          1 -> items = Items.obj().list().fromResponse(reader, responseAdapterCache)
          else -> break
        }
      }
      if (__typename in arrayOf("ParticularCollection")) {
        (reader as MapJsonReader).rewind()
        asAsParticularCollection = AsParticularCollection.fromResponse(reader, responseAdapterCache)
      }

      return GetPage.Data.Collection(
        __typename = __typename!!,
        items = items!!,
        asAsParticularCollection = asAsParticularCollection
      )
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: GetPage.Data.Collection
    ) {
      writer.name("__typename")
      StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)

      writer.name("items")
      Items.obj().list().toResponse(writer, responseAdapterCache, value.items)
      if (value.asAsParticularCollection != null)
          AsParticularCollection.toResponse(writer, responseAdapterCache, value.asAsParticularCollection)
    }

    object Items : ResponseAdapter<GetPage.Data.Collection.Items> {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          fieldName = "title",
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          GetPage.Data.Collection.Items {
        var title: String? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> title = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return GetPage.Data.Collection.Items(
          title = title!!
        )
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: GetPage.Data.Collection.Items
      ) {
        writer.name("title")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.title)
      }
    }

    object AsParticularCollection : ResponseAdapter<GetPage.Data.Collection.AsParticularCollection>
        {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename,
        ResponseField(
          type =
              ResponseField.Type.NotNull(ResponseField.Type.List(ResponseField.Type.NotNull(ResponseField.Type.Named.Object("Item")))),
          fieldName = "items",
          fieldSets = listOf(
            ResponseField.FieldSet("ParticularItem", Items.AsParticularItem.RESPONSE_FIELDS),
          ),
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

      override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
          GetPage.Data.Collection.AsParticularCollection {
        var __typename: String? = null
        var items: List<GetPage.Data.Collection.AsParticularCollection.Items>? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> items = Items.obj(true).list().fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return GetPage.Data.Collection.AsParticularCollection(
          __typename = __typename!!,
          items = items!!
        )
      }

      override fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: GetPage.Data.Collection.AsParticularCollection
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("items")
        Items.obj(true).list().toResponse(writer, responseAdapterCache, value.items)
      }

      object Items : ResponseAdapter<GetPage.Data.Collection.AsParticularCollection.Items> {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
            fieldName = "title",
          ),
          ResponseField.Typename
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            GetPage.Data.Collection.AsParticularCollection.Items {
          var title: String? = null
          var __typename: String? = null

          var asAsParticularItem: GetPage.Data.Collection.AsParticularCollection.Items.AsParticularItem? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> title = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              1 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              else -> break
            }
          }
          if (__typename in arrayOf("ParticularItem")) {
            (reader as MapJsonReader).rewind()
            asAsParticularItem = AsParticularItem.fromResponse(reader, responseAdapterCache)
          }

          return GetPage.Data.Collection.AsParticularCollection.Items(
            title = title!!,
            __typename = __typename!!,
            asAsParticularItem = asAsParticularItem
          )
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: GetPage.Data.Collection.AsParticularCollection.Items
        ) {
          writer.name("title")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.title)

          writer.name("__typename")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
          if (value.asAsParticularItem != null)
              AsParticularItem.toResponse(writer, responseAdapterCache, value.asAsParticularItem)
        }

        object AsParticularItem :
            ResponseAdapter<GetPage.Data.Collection.AsParticularCollection.Items.AsParticularItem> {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField.Typename,
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              fieldName = "image",
            ),
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              fieldName = "title",
            )
          )

          val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

          override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
              GetPage.Data.Collection.AsParticularCollection.Items.AsParticularItem {
            var __typename: String? = null
            var image: String? = null
            var title: String? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                1 -> image = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                2 -> title = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                else -> break
              }
            }
            return GetPage.Data.Collection.AsParticularCollection.Items.AsParticularItem(
              __typename = __typename!!,
              image = image!!,
              title = title!!
            )
          }

          override fun toResponse(
            writer: JsonWriter,
            responseAdapterCache: ResponseAdapterCache,
            value: GetPage.Data.Collection.AsParticularCollection.Items.AsParticularItem
          ) {
            writer.name("__typename")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
            writer.name("image")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.image)
            writer.name("title")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.title)
          }
        }
      }
    }
  }
}
