// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.test_inline.adapter

import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.obj
import com.example.test_inline.GetPage
import kotlin.Array
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
object GetPage_ResponseAdapter : ResponseAdapter<GetPage.Data> {
  val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
    ResponseField(
      type = ResponseField.Type.NotNull(ResponseField.Type.Named.Object("Collection")),
      fieldName = "collection",
      fieldSets = listOf(
        ResponseField.FieldSet("ParticularCollection",
            Collection.ParticularCollectionCollection.RESPONSE_FIELDS),
        ResponseField.FieldSet(null, Collection.OtherCollection.RESPONSE_FIELDS),
      ),
    )
  )

  val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

  override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
      GetPage.Data {
    var collection: GetPage.Data.Collection? = null
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> collection = Collection.obj().fromResponse(reader, responseAdapterCache)
        else -> break
      }
    }
    return GetPage.Data(
      collection = collection!!
    )
  }

  override fun toResponse(
    writer: JsonWriter,
    responseAdapterCache: ResponseAdapterCache,
    value: GetPage.Data
  ) {
    writer.beginObject()
    writer.name("collection")
    Collection.obj().toResponse(writer, responseAdapterCache, value.collection)
    writer.endObject()
  }

  object Collection : ResponseAdapter<GetPage.Data.Collection> {
    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        GetPage.Data.Collection {
      check(reader.nextName() == "__typename")
      val typename = reader.nextString()!!
      return when(typename) {
        "ParticularCollection" -> ParticularCollectionCollection.fromResponse(reader, responseAdapterCache, typename)
        else -> OtherCollection.fromResponse(reader, responseAdapterCache, typename)
      }
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: GetPage.Data.Collection
    ) {
      when(value) {
        is GetPage.Data.Collection.ParticularCollectionCollection -> ParticularCollectionCollection.toResponse(writer, responseAdapterCache, value)
        is GetPage.Data.Collection.OtherCollection -> OtherCollection.toResponse(writer, responseAdapterCache, value)
      }
    }

    object ParticularCollectionCollection {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename,
        ResponseField(
          type =
              ResponseField.Type.NotNull(ResponseField.Type.List(ResponseField.Type.NotNull(ResponseField.Type.Named.Object("Item")))),
          fieldName = "items",
          fieldSets = listOf(
            ResponseField.FieldSet("ParticularItem", Items.ParticularItemItems.RESPONSE_FIELDS),
            ResponseField.FieldSet(null, Items.OtherItems.RESPONSE_FIELDS),
          ),
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String?
      ): GetPage.Data.Collection.ParticularCollectionCollection {
        var __typename: String? = __typename
        var items: List<GetPage.Data.Collection.ParticularCollectionCollection.Items>? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> items = Items.obj().list().fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return GetPage.Data.Collection.ParticularCollectionCollection(
          __typename = __typename!!,
          items = items!!
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: GetPage.Data.Collection.ParticularCollectionCollection
      ) {
        writer.beginObject()
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("items")
        Items.obj().list().toResponse(writer, responseAdapterCache, value.items)
        writer.endObject()
      }

      object Items : ResponseAdapter<GetPage.Data.Collection.ParticularCollectionCollection.Items> {
        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            GetPage.Data.Collection.ParticularCollectionCollection.Items {
          check(reader.nextName() == "__typename")
          val typename = reader.nextString()!!
          return when(typename) {
            "ParticularItem" -> ParticularItemItems.fromResponse(reader, responseAdapterCache, typename)
            else -> OtherItems.fromResponse(reader, responseAdapterCache, typename)
          }
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: GetPage.Data.Collection.ParticularCollectionCollection.Items
        ) {
          when(value) {
            is GetPage.Data.Collection.ParticularCollectionCollection.Items.ParticularItemItems -> ParticularItemItems.toResponse(writer, responseAdapterCache, value)
            is GetPage.Data.Collection.ParticularCollectionCollection.Items.OtherItems -> OtherItems.toResponse(writer, responseAdapterCache, value)
          }
        }

        object ParticularItemItems {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              fieldName = "title",
            ),
            ResponseField.Typename,
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              fieldName = "image",
            )
          )

          val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

          fun fromResponse(
            reader: JsonReader,
            responseAdapterCache: ResponseAdapterCache,
            __typename: String?
          ): GetPage.Data.Collection.ParticularCollectionCollection.Items.ParticularItemItems {
            var title: String? = null
            var __typename: String? = __typename
            var image: String? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> title = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                1 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                2 -> image = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                else -> break
              }
            }
            return GetPage.Data.Collection.ParticularCollectionCollection.Items.ParticularItemItems(
              title = title!!,
              __typename = __typename!!,
              image = image!!
            )
          }

          fun toResponse(
            writer: JsonWriter,
            responseAdapterCache: ResponseAdapterCache,
            value: GetPage.Data.Collection.ParticularCollectionCollection.Items.ParticularItemItems
          ) {
            writer.beginObject()
            writer.name("title")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.title)
            writer.name("__typename")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
            writer.name("image")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.image)
            writer.endObject()
          }
        }

        object OtherItems {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              fieldName = "title",
            ),
            ResponseField.Typename
          )

          val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

          fun fromResponse(
            reader: JsonReader,
            responseAdapterCache: ResponseAdapterCache,
            __typename: String?
          ): GetPage.Data.Collection.ParticularCollectionCollection.Items.OtherItems {
            var title: String? = null
            var __typename: String? = __typename
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> title = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                1 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                else -> break
              }
            }
            return GetPage.Data.Collection.ParticularCollectionCollection.Items.OtherItems(
              title = title!!,
              __typename = __typename!!
            )
          }

          fun toResponse(
            writer: JsonWriter,
            responseAdapterCache: ResponseAdapterCache,
            value: GetPage.Data.Collection.ParticularCollectionCollection.Items.OtherItems
          ) {
            writer.beginObject()
            writer.name("title")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.title)
            writer.name("__typename")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
            writer.endObject()
          }
        }
      }
    }

    object OtherCollection {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename,
        ResponseField(
          type =
              ResponseField.Type.NotNull(ResponseField.Type.List(ResponseField.Type.NotNull(ResponseField.Type.Named.Object("Item")))),
          fieldName = "items",
          fieldSets = listOf(
            ResponseField.FieldSet(null, Items.RESPONSE_FIELDS)
          ),
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String?
      ): GetPage.Data.Collection.OtherCollection {
        var __typename: String? = __typename
        var items: List<GetPage.Data.Collection.OtherCollection.Items>? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> items = Items.obj().list().fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return GetPage.Data.Collection.OtherCollection(
          __typename = __typename!!,
          items = items!!
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: GetPage.Data.Collection.OtherCollection
      ) {
        writer.beginObject()
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("items")
        Items.obj().list().toResponse(writer, responseAdapterCache, value.items)
        writer.endObject()
      }

      object Items : ResponseAdapter<GetPage.Data.Collection.OtherCollection.Items> {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
            fieldName = "title",
          )
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            GetPage.Data.Collection.OtherCollection.Items {
          var title: String? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> title = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              else -> break
            }
          }
          return GetPage.Data.Collection.OtherCollection.Items(
            title = title!!
          )
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: GetPage.Data.Collection.OtherCollection.Items
        ) {
          writer.beginObject()
          writer.name("title")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.title)
          writer.endObject()
        }
      }
    }
  }
}
