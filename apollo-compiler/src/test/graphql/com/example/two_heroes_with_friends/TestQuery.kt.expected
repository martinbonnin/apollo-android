// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.two_heroes_with_friends

import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.QueryDocumentMinifier
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.example.two_heroes_with_friends.adapter.TestQuery_ResponseAdapter
import com.example.two_heroes_with_friends.adapter.TestQuery_VariablesAdapter
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
class TestQuery : Query<TestQuery.Data> {
  override fun operationId(): String = OPERATION_ID

  override fun queryDocument(): String = QUERY_DOCUMENT

  override fun serializeVariables(writer: JsonWriter, responseAdapterCache: ResponseAdapterCache) {
    TestQuery_VariablesAdapter.obj().toResponse(writer, responseAdapterCache, this)
  }

  override fun name(): String = OPERATION_NAME

  override fun adapter(): ResponseAdapter<Data> {
    return TestQuery_ResponseAdapter.obj()
  }

  override fun responseFields(): List<ResponseField.FieldSet> = listOf(
    ResponseField.FieldSet(null, TestQuery_ResponseAdapter.RESPONSE_FIELDS)
  )
  /**
   * The query type, represents all of the entry points into our object graph
   */
  data class Data(
    val r2: R2?,
    val luke: Luke?
  ) : Query.Data {
    /**
     * A character from the Star Wars universe
     */
    data class R2(
      /**
       * The name of the character
       */
      val name: String,
      /**
       * The friends of the character exposed as a connection with edges
       */
      val friendsConnection: FriendsConnection
    ) {
      /**
       * A connection object for a character's friends
       */
      data class FriendsConnection(
        /**
         * The total number of friends
         */
        val totalCount: Int?,
        /**
         * The edges for each of the character's friends.
         */
        val edges: List<Edges?>?
      ) {
        fun edgesFilterNotNull(): List<Edges>? = edges?.filterNotNull()

        /**
         * An edge object for a character's friends
         */
        data class Edges(
          /**
           * The character represented by this friendship edge
           */
          val node: Node?
        ) {
          /**
           * A character from the Star Wars universe
           */
          data class Node(
            /**
             * The name of the character
             */
            val name: String
          )
        }
      }
    }

    /**
     * A character from the Star Wars universe
     */
    data class Luke(
      /**
       * The ID of the character
       */
      val id: String,
      /**
       * The name of the character
       */
      val name: String,
      /**
       * The friends of the character exposed as a connection with edges
       */
      val friendsConnection: FriendsConnection
    ) {
      /**
       * A connection object for a character's friends
       */
      data class FriendsConnection(
        /**
         * The total number of friends
         */
        val totalCount: Int?,
        /**
         * The edges for each of the character's friends.
         */
        val edges: List<Edges?>?
      ) {
        fun edgesFilterNotNull(): List<Edges>? = edges?.filterNotNull()

        /**
         * An edge object for a character's friends
         */
        data class Edges(
          /**
           * The character represented by this friendship edge
           */
          val node: Node?
        ) {
          /**
           * A character from the Star Wars universe
           */
          data class Node(
            /**
             * The name of the character
             */
            val name: String
          )
        }
      }
    }
  }

  companion object {
    const val OPERATION_ID: String =
        "28b644b6fcd59e0677f51136035c5fc1deb6419f12b819bff2e6bf4c5f659916"

    val QUERY_DOCUMENT: String = QueryDocumentMinifier.minify(
          """
          |query TestQuery {
          |  r2: hero {
          |    name
          |    friendsConnection {
          |      totalCount
          |      edges {
          |        node {
          |          name
          |        }
          |      }
          |    }
          |  }
          |  luke: hero(episode: EMPIRE) {
          |    id
          |    name
          |    friendsConnection {
          |      totalCount
          |      edges {
          |        node {
          |          name
          |        }
          |      }
          |    }
          |  }
          |}
          """.trimMargin()
        )

    val OPERATION_NAME: String = "TestQuery"
  }
}
