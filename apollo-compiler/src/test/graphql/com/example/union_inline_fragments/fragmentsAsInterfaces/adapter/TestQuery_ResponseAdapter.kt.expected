// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.union_inline_fragments.adapter

import com.apollographql.apollo3.api.NullableStringResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.union_inline_fragments.TestQuery
import com.example.union_inline_fragments.type.Episode
import com.example.union_inline_fragments.type.Episode_ResponseAdapter
import kotlin.Array
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
object TestQuery_ResponseAdapter : ResponseAdapter<TestQuery.Data> {
  val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
    ResponseField(
      type = ResponseField.Type.List(ResponseField.Type.Named.Object("SearchResult")),
      fieldName = "search",
      arguments = mapOf<String, Any?>(
        "text" to "test"),
      fieldSets = listOf(
        ResponseField.FieldSet("Human", Search.CharacterSearch.RESPONSE_FIELDS),
        ResponseField.FieldSet("Droid", Search.CharacterSearch.RESPONSE_FIELDS),
        ResponseField.FieldSet("Starship", Search.StarshipSearch.RESPONSE_FIELDS),
        ResponseField.FieldSet(null, Search.OtherSearch.RESPONSE_FIELDS),
      ),
    )
  )

  val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

  override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
      TestQuery.Data {
    var search: List<TestQuery.Data.Search?>? = null
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> search = Search.obj().nullable().list().nullable().fromResponse(reader,
            responseAdapterCache)
        else -> break
      }
    }
    return TestQuery.Data(
      search = search
    )
  }

  override fun toResponse(
    writer: JsonWriter,
    responseAdapterCache: ResponseAdapterCache,
    value: TestQuery.Data
  ) {
    writer.name("search")
    Search.obj().nullable().list().nullable().toResponse(writer, responseAdapterCache, value.search)
  }

  object Search : ResponseAdapter<TestQuery.Data.Search> {
    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        TestQuery.Data.Search {
      check(reader.nextName() == "__typename")
      val typename = reader.nextString()!!
      return when(typename) {
        "Human" -> CharacterSearch.fromResponse(reader, responseAdapterCache, typename)
        "Droid" -> CharacterSearch.fromResponse(reader, responseAdapterCache, typename)
        "Starship" -> StarshipSearch.fromResponse(reader, responseAdapterCache, typename)
        else -> OtherSearch.fromResponse(reader, responseAdapterCache, typename)
      }
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: TestQuery.Data.Search
    ) {
      when(value) {
        is TestQuery.Data.Search.CharacterSearch -> CharacterSearch.toResponse(writer, responseAdapterCache, value)
        is TestQuery.Data.Search.StarshipSearch -> StarshipSearch.toResponse(writer, responseAdapterCache, value)
        is TestQuery.Data.Search.OtherSearch -> OtherSearch.toResponse(writer, responseAdapterCache, value)
      }
    }

    object CharacterSearch {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename,
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          fieldName = "id",
        ),
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          fieldName = "name",
        ),
        ResponseField(
          type = ResponseField.Type.List(ResponseField.Type.Named.Object("Character")),
          fieldName = "friends",
          fieldSets = listOf(
            ResponseField.FieldSet("Droid", Friends.CharacterDroidFriends.RESPONSE_FIELDS),
            ResponseField.FieldSet("Human", Friends.CharacterHumanFriends.RESPONSE_FIELDS),
            ResponseField.FieldSet(null, Friends.OtherFriends.RESPONSE_FIELDS),
          ),
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String?
      ): TestQuery.Data.Search.CharacterSearch {
        var __typename: String? = __typename
        var id: String? = null
        var name: String? = null
        var friends: List<TestQuery.Data.Search.CharacterSearch.Friends?>? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> id = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            2 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            3 -> friends = Friends.obj().nullable().list().nullable().fromResponse(reader,
                responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.Search.CharacterSearch(
          __typename = __typename!!,
          id = id!!,
          name = name!!,
          friends = friends
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.Search.CharacterSearch
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("id")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.id)
        writer.name("name")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        writer.name("friends")
        Friends.obj().nullable().list().nullable().toResponse(writer, responseAdapterCache,
            value.friends)
      }

      object Friends : ResponseAdapter<TestQuery.Data.Search.CharacterSearch.Friends> {
        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            TestQuery.Data.Search.CharacterSearch.Friends {
          check(reader.nextName() == "__typename")
          val typename = reader.nextString()!!
          return when(typename) {
            "Droid" -> CharacterDroidFriends.fromResponse(reader, responseAdapterCache, typename)
            "Human" -> CharacterHumanFriends.fromResponse(reader, responseAdapterCache, typename)
            else -> OtherFriends.fromResponse(reader, responseAdapterCache, typename)
          }
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: TestQuery.Data.Search.CharacterSearch.Friends
        ) {
          when(value) {
            is TestQuery.Data.Search.CharacterSearch.Friends.CharacterDroidFriends -> CharacterDroidFriends.toResponse(writer, responseAdapterCache, value)
            is TestQuery.Data.Search.CharacterSearch.Friends.CharacterHumanFriends -> CharacterHumanFriends.toResponse(writer, responseAdapterCache, value)
            is TestQuery.Data.Search.CharacterSearch.Friends.OtherFriends -> OtherFriends.toResponse(writer, responseAdapterCache, value)
          }
        }

        object CharacterDroidFriends {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField.Typename,
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              fieldName = "name",
            ),
            ResponseField(
              type = ResponseField.Type.Named.Other("String"),
              fieldName = "primaryFunction",
            ),
            ResponseField(
              type = ResponseField.Type.List(ResponseField.Type.Named.Object("Character")),
              fieldName = "friends",
              fieldSets = listOf(
                ResponseField.FieldSet(null, Friends.RESPONSE_FIELDS)
              ),
            )
          )

          val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

          fun fromResponse(
            reader: JsonReader,
            responseAdapterCache: ResponseAdapterCache,
            __typename: String?
          ): TestQuery.Data.Search.CharacterSearch.Friends.CharacterDroidFriends {
            var __typename: String? = __typename
            var name: String? = null
            var primaryFunction: String? = null
            var friends: List<TestQuery.Data.Search.CharacterSearch.Friends.CharacterDroidFriends.Friends?>? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                2 -> primaryFunction = NullableStringResponseAdapter.fromResponse(reader,
                    responseAdapterCache)
                3 -> friends = Friends.obj().nullable().list().nullable().fromResponse(reader,
                    responseAdapterCache)
                else -> break
              }
            }
            return TestQuery.Data.Search.CharacterSearch.Friends.CharacterDroidFriends(
              __typename = __typename!!,
              name = name!!,
              primaryFunction = primaryFunction,
              friends = friends
            )
          }

          fun toResponse(
            writer: JsonWriter,
            responseAdapterCache: ResponseAdapterCache,
            value: TestQuery.Data.Search.CharacterSearch.Friends.CharacterDroidFriends
          ) {
            writer.name("__typename")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
            writer.name("name")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
            writer.name("primaryFunction")
            NullableStringResponseAdapter.toResponse(writer, responseAdapterCache,
                value.primaryFunction)
            writer.name("friends")
            Friends.obj().nullable().list().nullable().toResponse(writer, responseAdapterCache,
                value.friends)
          }

          object Friends :
              ResponseAdapter<TestQuery.Data.Search.CharacterSearch.Friends.CharacterDroidFriends.Friends>
              {
            val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
              ResponseField(
                type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
                fieldName = "id",
              )
            )

            val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

            override fun fromResponse(reader: JsonReader,
                responseAdapterCache: ResponseAdapterCache):
                TestQuery.Data.Search.CharacterSearch.Friends.CharacterDroidFriends.Friends {
              var id: String? = null
              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> id = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                  else -> break
                }
              }
              return TestQuery.Data.Search.CharacterSearch.Friends.CharacterDroidFriends.Friends(
                id = id!!
              )
            }

            override fun toResponse(
              writer: JsonWriter,
              responseAdapterCache: ResponseAdapterCache,
              value: TestQuery.Data.Search.CharacterSearch.Friends.CharacterDroidFriends.Friends
            ) {
              writer.name("id")
              StringResponseAdapter.toResponse(writer, responseAdapterCache, value.id)
            }
          }
        }

        object CharacterHumanFriends {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField.Typename,
            ResponseField(
              type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
              fieldName = "name",
            ),
            ResponseField(
              type = ResponseField.Type.Named.Other("String"),
              fieldName = "homePlanet",
            ),
            ResponseField(
              type = ResponseField.Type.List(ResponseField.Type.Named.Object("Character")),
              fieldName = "friends",
              fieldSets = listOf(
                ResponseField.FieldSet("Droid", Friends.CharacterFriends.RESPONSE_FIELDS),
                ResponseField.FieldSet("Human", Friends.CharacterFriends.RESPONSE_FIELDS),
                ResponseField.FieldSet(null, Friends.OtherFriends.RESPONSE_FIELDS),
              ),
            )
          )

          val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

          fun fromResponse(
            reader: JsonReader,
            responseAdapterCache: ResponseAdapterCache,
            __typename: String?
          ): TestQuery.Data.Search.CharacterSearch.Friends.CharacterHumanFriends {
            var __typename: String? = __typename
            var name: String? = null
            var homePlanet: String? = null
            var friends: List<TestQuery.Data.Search.CharacterSearch.Friends.CharacterHumanFriends.Friends?>? = null
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                2 -> homePlanet = NullableStringResponseAdapter.fromResponse(reader,
                    responseAdapterCache)
                3 -> friends = Friends.obj().nullable().list().nullable().fromResponse(reader,
                    responseAdapterCache)
                else -> break
              }
            }
            return TestQuery.Data.Search.CharacterSearch.Friends.CharacterHumanFriends(
              __typename = __typename!!,
              name = name!!,
              homePlanet = homePlanet,
              friends = friends
            )
          }

          fun toResponse(
            writer: JsonWriter,
            responseAdapterCache: ResponseAdapterCache,
            value: TestQuery.Data.Search.CharacterSearch.Friends.CharacterHumanFriends
          ) {
            writer.name("__typename")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
            writer.name("name")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
            writer.name("homePlanet")
            NullableStringResponseAdapter.toResponse(writer, responseAdapterCache, value.homePlanet)
            writer.name("friends")
            Friends.obj().nullable().list().nullable().toResponse(writer, responseAdapterCache,
                value.friends)
          }

          object Friends :
              ResponseAdapter<TestQuery.Data.Search.CharacterSearch.Friends.CharacterHumanFriends.Friends>
              {
            override fun fromResponse(reader: JsonReader,
                responseAdapterCache: ResponseAdapterCache):
                TestQuery.Data.Search.CharacterSearch.Friends.CharacterHumanFriends.Friends {
              check(reader.nextName() == "__typename")
              val typename = reader.nextString()!!
              return when(typename) {
                "Droid" -> CharacterFriends.fromResponse(reader, responseAdapterCache, typename)
                "Human" -> CharacterFriends.fromResponse(reader, responseAdapterCache, typename)
                else -> OtherFriends.fromResponse(reader, responseAdapterCache, typename)
              }
            }

            override fun toResponse(
              writer: JsonWriter,
              responseAdapterCache: ResponseAdapterCache,
              value: TestQuery.Data.Search.CharacterSearch.Friends.CharacterHumanFriends.Friends
            ) {
              when(value) {
                is TestQuery.Data.Search.CharacterSearch.Friends.CharacterHumanFriends.Friends.CharacterFriends -> CharacterFriends.toResponse(writer, responseAdapterCache, value)
                is TestQuery.Data.Search.CharacterSearch.Friends.CharacterHumanFriends.Friends.OtherFriends -> OtherFriends.toResponse(writer, responseAdapterCache, value)
              }
            }

            object CharacterFriends {
              val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
                ResponseField.Typename,
                ResponseField(
                  type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("Episode")),
                  fieldName = "firstAppearsIn",
                )
              )

              val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

              fun fromResponse(
                reader: JsonReader,
                responseAdapterCache: ResponseAdapterCache,
                __typename: String?
              ):
                  TestQuery.Data.Search.CharacterSearch.Friends.CharacterHumanFriends.Friends.CharacterFriends {
                var __typename: String? = __typename
                var firstAppearsIn: Episode? = null
                while(true) {
                  when (reader.selectName(RESPONSE_NAMES)) {
                    0 -> __typename = StringResponseAdapter.fromResponse(reader,
                        responseAdapterCache)
                    1 -> firstAppearsIn = Episode_ResponseAdapter.fromResponse(reader,
                        responseAdapterCache)
                    else -> break
                  }
                }
                return TestQuery.Data.Search.CharacterSearch.Friends.CharacterHumanFriends.Friends.CharacterFriends(
                  __typename = __typename!!,
                  firstAppearsIn = firstAppearsIn!!
                )
              }

              fun toResponse(
                writer: JsonWriter,
                responseAdapterCache: ResponseAdapterCache,
                value: TestQuery.Data.Search.CharacterSearch.Friends.CharacterHumanFriends.Friends.CharacterFriends
              ) {
                writer.name("__typename")
                StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
                writer.name("firstAppearsIn")
                Episode_ResponseAdapter.toResponse(writer, responseAdapterCache,
                    value.firstAppearsIn)
              }
            }

            object OtherFriends {
              val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
                ResponseField.Typename
              )

              val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

              fun fromResponse(
                reader: JsonReader,
                responseAdapterCache: ResponseAdapterCache,
                __typename: String?
              ):
                  TestQuery.Data.Search.CharacterSearch.Friends.CharacterHumanFriends.Friends.OtherFriends {
                var __typename: String? = __typename
                while(true) {
                  when (reader.selectName(RESPONSE_NAMES)) {
                    0 -> __typename = StringResponseAdapter.fromResponse(reader,
                        responseAdapterCache)
                    else -> break
                  }
                }
                return TestQuery.Data.Search.CharacterSearch.Friends.CharacterHumanFriends.Friends.OtherFriends(
                  __typename = __typename!!
                )
              }

              fun toResponse(
                writer: JsonWriter,
                responseAdapterCache: ResponseAdapterCache,
                value: TestQuery.Data.Search.CharacterSearch.Friends.CharacterHumanFriends.Friends.OtherFriends
              ) {
                writer.name("__typename")
                StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
              }
            }
          }
        }

        object OtherFriends {
          val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField.Typename
          )

          val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

          fun fromResponse(
            reader: JsonReader,
            responseAdapterCache: ResponseAdapterCache,
            __typename: String?
          ): TestQuery.Data.Search.CharacterSearch.Friends.OtherFriends {
            var __typename: String? = __typename
            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                else -> break
              }
            }
            return TestQuery.Data.Search.CharacterSearch.Friends.OtherFriends(
              __typename = __typename!!
            )
          }

          fun toResponse(
            writer: JsonWriter,
            responseAdapterCache: ResponseAdapterCache,
            value: TestQuery.Data.Search.CharacterSearch.Friends.OtherFriends
          ) {
            writer.name("__typename")
            StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
          }
        }
      }
    }

    object StarshipSearch {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename,
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          fieldName = "name",
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String?
      ): TestQuery.Data.Search.StarshipSearch {
        var __typename: String? = __typename
        var name: String? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.Search.StarshipSearch(
          __typename = __typename!!,
          name = name!!
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.Search.StarshipSearch
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("name")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
      }
    }

    object OtherSearch {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String?
      ): TestQuery.Data.Search.OtherSearch {
        var __typename: String? = __typename
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return TestQuery.Data.Search.OtherSearch(
          __typename = __typename!!
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: TestQuery.Data.Search.OtherSearch
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
      }
    }
  }
}
