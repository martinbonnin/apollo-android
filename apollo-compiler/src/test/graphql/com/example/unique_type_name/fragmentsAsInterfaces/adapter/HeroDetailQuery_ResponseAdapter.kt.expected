// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.unique_type_name.adapter

import com.apollographql.apollo3.api.NullableDoubleResponseAdapter
import com.apollographql.apollo3.api.NullableIntResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapter
import com.apollographql.apollo3.api.ResponseAdapterCache
import com.apollographql.apollo3.api.ResponseField
import com.apollographql.apollo3.api.StringResponseAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.unique_type_name.HeroDetailQuery
import com.example.unique_type_name.type.Episode
import com.example.unique_type_name.type.Episode_ResponseAdapter
import kotlin.Array
import kotlin.Double
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter", "PropertyName",
    "RemoveRedundantQualifierName")
object HeroDetailQuery_ResponseAdapter : ResponseAdapter<HeroDetailQuery.Data> {
  val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
    ResponseField(
      type = ResponseField.Type.Named.Object("Character"),
      fieldName = "heroDetailQuery",
      fieldSets = listOf(
        ResponseField.FieldSet("Human", HeroDetailQuery.HumanHeroDetailQuery.RESPONSE_FIELDS),
        ResponseField.FieldSet(null, HeroDetailQuery.OtherHeroDetailQuery.RESPONSE_FIELDS),
      ),
    )
  )

  val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

  override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
      com.example.unique_type_name.HeroDetailQuery.Data {
    var heroDetailQuery: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery? = null
    while(true) {
      when (reader.selectName(RESPONSE_NAMES)) {
        0 -> heroDetailQuery = HeroDetailQuery.obj().nullable().fromResponse(reader,
            responseAdapterCache)
        else -> break
      }
    }
    return com.example.unique_type_name.HeroDetailQuery.Data(
      heroDetailQuery = heroDetailQuery
    )
  }

  override fun toResponse(
    writer: JsonWriter,
    responseAdapterCache: ResponseAdapterCache,
    value: com.example.unique_type_name.HeroDetailQuery.Data
  ) {
    writer.name("heroDetailQuery")
    HeroDetailQuery.obj().nullable().toResponse(writer, responseAdapterCache, value.heroDetailQuery)
  }

  object HeroDetailQuery :
      ResponseAdapter<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery> {
    override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
        com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery {
      check(reader.nextName() == "__typename")
      val typename = reader.nextString()!!
      return when(typename) {
        "Human" -> HumanHeroDetailQuery.fromResponse(reader, responseAdapterCache, typename)
        else -> OtherHeroDetailQuery.fromResponse(reader, responseAdapterCache, typename)
      }
    }

    override fun toResponse(
      writer: JsonWriter,
      responseAdapterCache: ResponseAdapterCache,
      value: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery
    ) {
      when(value) {
        is com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery -> HumanHeroDetailQuery.toResponse(writer, responseAdapterCache, value)
        is com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.OtherHeroDetailQuery -> OtherHeroDetailQuery.toResponse(writer, responseAdapterCache, value)
      }
    }

    object HumanHeroDetailQuery {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename,
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          fieldName = "name",
        ),
        ResponseField(
          type = ResponseField.Type.List(ResponseField.Type.Named.Object("Character")),
          fieldName = "friends",
          fieldSets = listOf(
            ResponseField.FieldSet(null, Friends.RESPONSE_FIELDS)
          ),
        ),
        ResponseField(
          type = ResponseField.Type.Named.Other("Float"),
          fieldName = "height",
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String?
      ): com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery {
        var __typename: String? = __typename
        var name: String? = null
        var friends: List<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friends?>? = null
        var height: Double? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            2 -> friends = Friends.obj().nullable().list().nullable().fromResponse(reader,
                responseAdapterCache)
            3 -> height = NullableDoubleResponseAdapter.fromResponse(reader, responseAdapterCache)
            else -> break
          }
        }
        return com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery(
          __typename = __typename!!,
          name = name!!,
          friends = friends,
          height = height
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("name")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        writer.name("friends")
        Friends.obj().nullable().list().nullable().toResponse(writer, responseAdapterCache,
            value.friends)
        writer.name("height")
        NullableDoubleResponseAdapter.toResponse(writer, responseAdapterCache, value.height)
      }

      object Friends :
          ResponseAdapter<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friends>
          {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
            fieldName = "name",
          ),
          ResponseField(
            type =
                ResponseField.Type.NotNull(ResponseField.Type.List(ResponseField.Type.Named.Other("Episode"))),
            fieldName = "appearsIn",
          ),
          ResponseField(
            type = ResponseField.Type.List(ResponseField.Type.Named.Object("Character")),
            fieldName = "friends",
            fieldSets = listOf(
              ResponseField.FieldSet("Droid", Friends.CharacterFriends.RESPONSE_FIELDS),
              ResponseField.FieldSet("Human", Friends.CharacterFriends.RESPONSE_FIELDS),
              ResponseField.FieldSet(null, Friends.OtherFriends.RESPONSE_FIELDS),
            ),
          )
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friends {
          var name: String? = null
          var appearsIn: List<Episode?>? = null
          var friends: List<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friends.Friends?>? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              1 -> appearsIn = Episode_ResponseAdapter.nullable().list().fromResponse(reader,
                  responseAdapterCache)
              2 -> friends = Friends.obj().nullable().list().nullable().fromResponse(reader,
                  responseAdapterCache)
              else -> break
            }
          }
          return com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friends(
            name = name!!,
            appearsIn = appearsIn!!,
            friends = friends
          )
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friends
        ) {
          writer.name("name")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
          writer.name("appearsIn")
          Episode_ResponseAdapter.nullable().list().toResponse(writer, responseAdapterCache,
              value.appearsIn)
          writer.name("friends")
          Friends.obj().nullable().list().nullable().toResponse(writer, responseAdapterCache,
              value.friends)
        }

        object Friends :
            ResponseAdapter<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friends.Friends>
            {
          override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
              com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friends.Friends {
            check(reader.nextName() == "__typename")
            val typename = reader.nextString()!!
            return when(typename) {
              "Droid" -> CharacterFriends.fromResponse(reader, responseAdapterCache, typename)
              "Human" -> CharacterFriends.fromResponse(reader, responseAdapterCache, typename)
              else -> OtherFriends.fromResponse(reader, responseAdapterCache, typename)
            }
          }

          override fun toResponse(
            writer: JsonWriter,
            responseAdapterCache: ResponseAdapterCache,
            value: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friends.Friends
          ) {
            when(value) {
              is com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friends.Friends.CharacterFriends -> CharacterFriends.toResponse(writer, responseAdapterCache, value)
              is com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friends.Friends.OtherFriends -> OtherFriends.toResponse(writer, responseAdapterCache, value)
            }
          }

          object CharacterFriends {
            val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
              ResponseField.Typename,
              ResponseField(
                type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
                fieldName = "name",
              ),
              ResponseField(
                type =
                    ResponseField.Type.NotNull(ResponseField.Type.Named.Object("FriendsConnection")),
                fieldName = "friendsConnection",
                fieldSets = listOf(
                  ResponseField.FieldSet(null, FriendsConnection.RESPONSE_FIELDS)
                ),
              )
            )

            val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

            fun fromResponse(
              reader: JsonReader,
              responseAdapterCache: ResponseAdapterCache,
              __typename: String?
            ):
                com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friends.Friends.CharacterFriends {
              var __typename: String? = __typename
              var name: String? = null
              var friendsConnection: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friends.Friends.CharacterFriends.FriendsConnection? = null
              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                  1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                  2 -> friendsConnection = FriendsConnection.obj().fromResponse(reader,
                      responseAdapterCache)
                  else -> break
                }
              }
              return com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friends.Friends.CharacterFriends(
                __typename = __typename!!,
                name = name!!,
                friendsConnection = friendsConnection!!
              )
            }

            fun toResponse(
              writer: JsonWriter,
              responseAdapterCache: ResponseAdapterCache,
              value: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friends.Friends.CharacterFriends
            ) {
              writer.name("__typename")
              StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
              writer.name("name")
              StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
              writer.name("friendsConnection")
              FriendsConnection.obj().toResponse(writer, responseAdapterCache,
                  value.friendsConnection)
            }

            object FriendsConnection :
                ResponseAdapter<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friends.Friends.CharacterFriends.FriendsConnection>
                {
              val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
                ResponseField(
                  type = ResponseField.Type.Named.Other("Int"),
                  fieldName = "totalCount",
                ),
                ResponseField(
                  type = ResponseField.Type.List(ResponseField.Type.Named.Object("FriendsEdge")),
                  fieldName = "edges",
                  fieldSets = listOf(
                    ResponseField.FieldSet(null, Edges.RESPONSE_FIELDS)
                  ),
                )
              )

              val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

              override fun fromResponse(reader: JsonReader,
                  responseAdapterCache: ResponseAdapterCache):
                  com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friends.Friends.CharacterFriends.FriendsConnection {
                var totalCount: Int? = null
                var edges: List<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friends.Friends.CharacterFriends.FriendsConnection.Edges?>? = null
                while(true) {
                  when (reader.selectName(RESPONSE_NAMES)) {
                    0 -> totalCount = NullableIntResponseAdapter.fromResponse(reader,
                        responseAdapterCache)
                    1 -> edges = Edges.obj().nullable().list().nullable().fromResponse(reader,
                        responseAdapterCache)
                    else -> break
                  }
                }
                return com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friends.Friends.CharacterFriends.FriendsConnection(
                  totalCount = totalCount,
                  edges = edges
                )
              }

              override fun toResponse(
                writer: JsonWriter,
                responseAdapterCache: ResponseAdapterCache,
                value: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friends.Friends.CharacterFriends.FriendsConnection
              ) {
                writer.name("totalCount")
                NullableIntResponseAdapter.toResponse(writer, responseAdapterCache,
                    value.totalCount)
                writer.name("edges")
                Edges.obj().nullable().list().nullable().toResponse(writer, responseAdapterCache,
                    value.edges)
              }

              object Edges :
                  ResponseAdapter<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friends.Friends.CharacterFriends.FriendsConnection.Edges>
                  {
                val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
                  ResponseField(
                    type = ResponseField.Type.Named.Object("Character"),
                    fieldName = "node",
                    fieldSets = listOf(
                      ResponseField.FieldSet(null, Node.RESPONSE_FIELDS)
                    ),
                  )
                )

                val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

                override fun fromResponse(reader: JsonReader,
                    responseAdapterCache: ResponseAdapterCache):
                    com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friends.Friends.CharacterFriends.FriendsConnection.Edges {
                  var node: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friends.Friends.CharacterFriends.FriendsConnection.Edges.Node? = null
                  while(true) {
                    when (reader.selectName(RESPONSE_NAMES)) {
                      0 -> node = Node.obj().nullable().fromResponse(reader, responseAdapterCache)
                      else -> break
                    }
                  }
                  return com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friends.Friends.CharacterFriends.FriendsConnection.Edges(
                    node = node
                  )
                }

                override fun toResponse(
                  writer: JsonWriter,
                  responseAdapterCache: ResponseAdapterCache,
                  value: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friends.Friends.CharacterFriends.FriendsConnection.Edges
                ) {
                  writer.name("node")
                  Node.obj().nullable().toResponse(writer, responseAdapterCache, value.node)
                }

                object Node :
                    ResponseAdapter<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friends.Friends.CharacterFriends.FriendsConnection.Edges.Node>
                    {
                  val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
                    ResponseField(
                      type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
                      fieldName = "name",
                    )
                  )

                  val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

                  override fun fromResponse(reader: JsonReader,
                      responseAdapterCache: ResponseAdapterCache):
                      com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friends.Friends.CharacterFriends.FriendsConnection.Edges.Node {
                    var name: String? = null
                    while(true) {
                      when (reader.selectName(RESPONSE_NAMES)) {
                        0 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                        else -> break
                      }
                    }
                    return com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friends.Friends.CharacterFriends.FriendsConnection.Edges.Node(
                      name = name!!
                    )
                  }

                  override fun toResponse(
                    writer: JsonWriter,
                    responseAdapterCache: ResponseAdapterCache,
                    value: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friends.Friends.CharacterFriends.FriendsConnection.Edges.Node
                  ) {
                    writer.name("name")
                    StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
                  }
                }
              }
            }
          }

          object OtherFriends {
            val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
              ResponseField.Typename
            )

            val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

            fun fromResponse(
              reader: JsonReader,
              responseAdapterCache: ResponseAdapterCache,
              __typename: String?
            ):
                com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friends.Friends.OtherFriends {
              var __typename: String? = __typename
              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
                  else -> break
                }
              }
              return com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friends.Friends.OtherFriends(
                __typename = __typename!!
              )
            }

            fun toResponse(
              writer: JsonWriter,
              responseAdapterCache: ResponseAdapterCache,
              value: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.HumanHeroDetailQuery.Friends.Friends.OtherFriends
            ) {
              writer.name("__typename")
              StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
            }
          }
        }
      }
    }

    object OtherHeroDetailQuery {
      val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.Typename,
        ResponseField(
          type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
          fieldName = "name",
        ),
        ResponseField(
          type = ResponseField.Type.List(ResponseField.Type.Named.Object("Character")),
          fieldName = "friends",
          fieldSets = listOf(
            ResponseField.FieldSet(null, Friends.RESPONSE_FIELDS)
          ),
        )
      )

      val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

      fun fromResponse(
        reader: JsonReader,
        responseAdapterCache: ResponseAdapterCache,
        __typename: String?
      ): com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.OtherHeroDetailQuery {
        var __typename: String? = __typename
        var name: String? = null
        var friends: List<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.OtherHeroDetailQuery.Friends?>? = null
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            1 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
            2 -> friends = Friends.obj().nullable().list().nullable().fromResponse(reader,
                responseAdapterCache)
            else -> break
          }
        }
        return com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.OtherHeroDetailQuery(
          __typename = __typename!!,
          name = name!!,
          friends = friends
        )
      }

      fun toResponse(
        writer: JsonWriter,
        responseAdapterCache: ResponseAdapterCache,
        value: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.OtherHeroDetailQuery
      ) {
        writer.name("__typename")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.__typename)
        writer.name("name")
        StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        writer.name("friends")
        Friends.obj().nullable().list().nullable().toResponse(writer, responseAdapterCache,
            value.friends)
      }

      object Friends :
          ResponseAdapter<com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.OtherHeroDetailQuery.Friends>
          {
        val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField(
            type = ResponseField.Type.NotNull(ResponseField.Type.Named.Other("String")),
            fieldName = "name",
          )
        )

        val RESPONSE_NAMES: List<String> = RESPONSE_FIELDS.map { it.responseName }

        override fun fromResponse(reader: JsonReader, responseAdapterCache: ResponseAdapterCache):
            com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.OtherHeroDetailQuery.Friends {
          var name: String? = null
          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> name = StringResponseAdapter.fromResponse(reader, responseAdapterCache)
              else -> break
            }
          }
          return com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.OtherHeroDetailQuery.Friends(
            name = name!!
          )
        }

        override fun toResponse(
          writer: JsonWriter,
          responseAdapterCache: ResponseAdapterCache,
          value: com.example.unique_type_name.HeroDetailQuery.Data.HeroDetailQuery.OtherHeroDetailQuery.Friends
        ) {
          writer.name("name")
          StringResponseAdapter.toResponse(writer, responseAdapterCache, value.name)
        }
      }
    }
  }
}
